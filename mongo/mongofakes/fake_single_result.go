// Code generated by counterfeiter. DO NOT EDIT.
package mongofakes

import (
	"sync"

	"github.com/rleszilm/genms/mongo"
	"github.com/rleszilm/genms/mongo/bson"
)

type FakeSingleResult struct {
	DecodeStub        func(interface{}) error
	decodeMutex       sync.RWMutex
	decodeArgsForCall []struct {
		arg1 interface{}
	}
	decodeReturns struct {
		result1 error
	}
	decodeReturnsOnCall map[int]struct {
		result1 error
	}
	DecodeBytesStub        func() (bson.Raw, error)
	decodeBytesMutex       sync.RWMutex
	decodeBytesArgsForCall []struct {
	}
	decodeBytesReturns struct {
		result1 bson.Raw
		result2 error
	}
	decodeBytesReturnsOnCall map[int]struct {
		result1 bson.Raw
		result2 error
	}
	ErrStub        func() error
	errMutex       sync.RWMutex
	errArgsForCall []struct {
	}
	errReturns struct {
		result1 error
	}
	errReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSingleResult) Decode(arg1 interface{}) error {
	fake.decodeMutex.Lock()
	ret, specificReturn := fake.decodeReturnsOnCall[len(fake.decodeArgsForCall)]
	fake.decodeArgsForCall = append(fake.decodeArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Decode", []interface{}{arg1})
	fake.decodeMutex.Unlock()
	if fake.DecodeStub != nil {
		return fake.DecodeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.decodeReturns
	return fakeReturns.result1
}

func (fake *FakeSingleResult) DecodeCallCount() int {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	return len(fake.decodeArgsForCall)
}

func (fake *FakeSingleResult) DecodeCalls(stub func(interface{}) error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = stub
}

func (fake *FakeSingleResult) DecodeArgsForCall(i int) interface{} {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	argsForCall := fake.decodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSingleResult) DecodeReturns(result1 error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	fake.decodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSingleResult) DecodeReturnsOnCall(i int, result1 error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	if fake.decodeReturnsOnCall == nil {
		fake.decodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSingleResult) DecodeBytes() (bson.Raw, error) {
	fake.decodeBytesMutex.Lock()
	ret, specificReturn := fake.decodeBytesReturnsOnCall[len(fake.decodeBytesArgsForCall)]
	fake.decodeBytesArgsForCall = append(fake.decodeBytesArgsForCall, struct {
	}{})
	fake.recordInvocation("DecodeBytes", []interface{}{})
	fake.decodeBytesMutex.Unlock()
	if fake.DecodeBytesStub != nil {
		return fake.DecodeBytesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.decodeBytesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSingleResult) DecodeBytesCallCount() int {
	fake.decodeBytesMutex.RLock()
	defer fake.decodeBytesMutex.RUnlock()
	return len(fake.decodeBytesArgsForCall)
}

func (fake *FakeSingleResult) DecodeBytesCalls(stub func() (bson.Raw, error)) {
	fake.decodeBytesMutex.Lock()
	defer fake.decodeBytesMutex.Unlock()
	fake.DecodeBytesStub = stub
}

func (fake *FakeSingleResult) DecodeBytesReturns(result1 bson.Raw, result2 error) {
	fake.decodeBytesMutex.Lock()
	defer fake.decodeBytesMutex.Unlock()
	fake.DecodeBytesStub = nil
	fake.decodeBytesReturns = struct {
		result1 bson.Raw
		result2 error
	}{result1, result2}
}

func (fake *FakeSingleResult) DecodeBytesReturnsOnCall(i int, result1 bson.Raw, result2 error) {
	fake.decodeBytesMutex.Lock()
	defer fake.decodeBytesMutex.Unlock()
	fake.DecodeBytesStub = nil
	if fake.decodeBytesReturnsOnCall == nil {
		fake.decodeBytesReturnsOnCall = make(map[int]struct {
			result1 bson.Raw
			result2 error
		})
	}
	fake.decodeBytesReturnsOnCall[i] = struct {
		result1 bson.Raw
		result2 error
	}{result1, result2}
}

func (fake *FakeSingleResult) Err() error {
	fake.errMutex.Lock()
	ret, specificReturn := fake.errReturnsOnCall[len(fake.errArgsForCall)]
	fake.errArgsForCall = append(fake.errArgsForCall, struct {
	}{})
	fake.recordInvocation("Err", []interface{}{})
	fake.errMutex.Unlock()
	if fake.ErrStub != nil {
		return fake.ErrStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.errReturns
	return fakeReturns.result1
}

func (fake *FakeSingleResult) ErrCallCount() int {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return len(fake.errArgsForCall)
}

func (fake *FakeSingleResult) ErrCalls(stub func() error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = stub
}

func (fake *FakeSingleResult) ErrReturns(result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	fake.errReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSingleResult) ErrReturnsOnCall(i int, result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	if fake.errReturnsOnCall == nil {
		fake.errReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.errReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSingleResult) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	fake.decodeBytesMutex.RLock()
	defer fake.decodeBytesMutex.RUnlock()
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSingleResult) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mongo.SingleResult = new(FakeSingleResult)
