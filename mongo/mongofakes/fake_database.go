// Code generated by counterfeiter. DO NOT EDIT.
package mongofakes

import (
	"context"
	"sync"

	"github.com/rleszilm/genms/mongo"
)

type FakeDatabase struct {
	ClientStub        func() mongo.Client
	clientMutex       sync.RWMutex
	clientArgsForCall []struct {
	}
	clientReturns struct {
		result1 mongo.Client
	}
	clientReturnsOnCall map[int]struct {
		result1 mongo.Client
	}
	CollectionStub        func(string, ...*mongo.CollectionOptions) mongo.Collection
	collectionMutex       sync.RWMutex
	collectionArgsForCall []struct {
		arg1 string
		arg2 []*mongo.CollectionOptions
	}
	collectionReturns struct {
		result1 mongo.Collection
	}
	collectionReturnsOnCall map[int]struct {
		result1 mongo.Collection
	}
	DropStub        func(context.Context) error
	dropMutex       sync.RWMutex
	dropArgsForCall []struct {
		arg1 context.Context
	}
	dropReturns struct {
		result1 error
	}
	dropReturnsOnCall map[int]struct {
		result1 error
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	RunCommandStub        func(context.Context, interface{}, ...*mongo.RunCmdOptions) mongo.SingleResult
	runCommandMutex       sync.RWMutex
	runCommandArgsForCall []struct {
		arg1 context.Context
		arg2 interface{}
		arg3 []*mongo.RunCmdOptions
	}
	runCommandReturns struct {
		result1 mongo.SingleResult
	}
	runCommandReturnsOnCall map[int]struct {
		result1 mongo.SingleResult
	}
	RunCommandCursorStub        func(context.Context, interface{}, ...*mongo.RunCmdOptions) (mongo.Cursor, error)
	runCommandCursorMutex       sync.RWMutex
	runCommandCursorArgsForCall []struct {
		arg1 context.Context
		arg2 interface{}
		arg3 []*mongo.RunCmdOptions
	}
	runCommandCursorReturns struct {
		result1 mongo.Cursor
		result2 error
	}
	runCommandCursorReturnsOnCall map[int]struct {
		result1 mongo.Cursor
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDatabase) Client() mongo.Client {
	fake.clientMutex.Lock()
	ret, specificReturn := fake.clientReturnsOnCall[len(fake.clientArgsForCall)]
	fake.clientArgsForCall = append(fake.clientArgsForCall, struct {
	}{})
	fake.recordInvocation("Client", []interface{}{})
	fake.clientMutex.Unlock()
	if fake.ClientStub != nil {
		return fake.ClientStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.clientReturns
	return fakeReturns.result1
}

func (fake *FakeDatabase) ClientCallCount() int {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return len(fake.clientArgsForCall)
}

func (fake *FakeDatabase) ClientCalls(stub func() mongo.Client) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = stub
}

func (fake *FakeDatabase) ClientReturns(result1 mongo.Client) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	fake.clientReturns = struct {
		result1 mongo.Client
	}{result1}
}

func (fake *FakeDatabase) ClientReturnsOnCall(i int, result1 mongo.Client) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	if fake.clientReturnsOnCall == nil {
		fake.clientReturnsOnCall = make(map[int]struct {
			result1 mongo.Client
		})
	}
	fake.clientReturnsOnCall[i] = struct {
		result1 mongo.Client
	}{result1}
}

func (fake *FakeDatabase) Collection(arg1 string, arg2 ...*mongo.CollectionOptions) mongo.Collection {
	fake.collectionMutex.Lock()
	ret, specificReturn := fake.collectionReturnsOnCall[len(fake.collectionArgsForCall)]
	fake.collectionArgsForCall = append(fake.collectionArgsForCall, struct {
		arg1 string
		arg2 []*mongo.CollectionOptions
	}{arg1, arg2})
	fake.recordInvocation("Collection", []interface{}{arg1, arg2})
	fake.collectionMutex.Unlock()
	if fake.CollectionStub != nil {
		return fake.CollectionStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.collectionReturns
	return fakeReturns.result1
}

func (fake *FakeDatabase) CollectionCallCount() int {
	fake.collectionMutex.RLock()
	defer fake.collectionMutex.RUnlock()
	return len(fake.collectionArgsForCall)
}

func (fake *FakeDatabase) CollectionCalls(stub func(string, ...*mongo.CollectionOptions) mongo.Collection) {
	fake.collectionMutex.Lock()
	defer fake.collectionMutex.Unlock()
	fake.CollectionStub = stub
}

func (fake *FakeDatabase) CollectionArgsForCall(i int) (string, []*mongo.CollectionOptions) {
	fake.collectionMutex.RLock()
	defer fake.collectionMutex.RUnlock()
	argsForCall := fake.collectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDatabase) CollectionReturns(result1 mongo.Collection) {
	fake.collectionMutex.Lock()
	defer fake.collectionMutex.Unlock()
	fake.CollectionStub = nil
	fake.collectionReturns = struct {
		result1 mongo.Collection
	}{result1}
}

func (fake *FakeDatabase) CollectionReturnsOnCall(i int, result1 mongo.Collection) {
	fake.collectionMutex.Lock()
	defer fake.collectionMutex.Unlock()
	fake.CollectionStub = nil
	if fake.collectionReturnsOnCall == nil {
		fake.collectionReturnsOnCall = make(map[int]struct {
			result1 mongo.Collection
		})
	}
	fake.collectionReturnsOnCall[i] = struct {
		result1 mongo.Collection
	}{result1}
}

func (fake *FakeDatabase) Drop(arg1 context.Context) error {
	fake.dropMutex.Lock()
	ret, specificReturn := fake.dropReturnsOnCall[len(fake.dropArgsForCall)]
	fake.dropArgsForCall = append(fake.dropArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Drop", []interface{}{arg1})
	fake.dropMutex.Unlock()
	if fake.DropStub != nil {
		return fake.DropStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.dropReturns
	return fakeReturns.result1
}

func (fake *FakeDatabase) DropCallCount() int {
	fake.dropMutex.RLock()
	defer fake.dropMutex.RUnlock()
	return len(fake.dropArgsForCall)
}

func (fake *FakeDatabase) DropCalls(stub func(context.Context) error) {
	fake.dropMutex.Lock()
	defer fake.dropMutex.Unlock()
	fake.DropStub = stub
}

func (fake *FakeDatabase) DropArgsForCall(i int) context.Context {
	fake.dropMutex.RLock()
	defer fake.dropMutex.RUnlock()
	argsForCall := fake.dropArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDatabase) DropReturns(result1 error) {
	fake.dropMutex.Lock()
	defer fake.dropMutex.Unlock()
	fake.DropStub = nil
	fake.dropReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) DropReturnsOnCall(i int, result1 error) {
	fake.dropMutex.Lock()
	defer fake.dropMutex.Unlock()
	fake.DropStub = nil
	if fake.dropReturnsOnCall == nil {
		fake.dropReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.dropReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nameReturns
	return fakeReturns.result1
}

func (fake *FakeDatabase) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeDatabase) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeDatabase) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDatabase) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDatabase) RunCommand(arg1 context.Context, arg2 interface{}, arg3 ...*mongo.RunCmdOptions) mongo.SingleResult {
	fake.runCommandMutex.Lock()
	ret, specificReturn := fake.runCommandReturnsOnCall[len(fake.runCommandArgsForCall)]
	fake.runCommandArgsForCall = append(fake.runCommandArgsForCall, struct {
		arg1 context.Context
		arg2 interface{}
		arg3 []*mongo.RunCmdOptions
	}{arg1, arg2, arg3})
	fake.recordInvocation("RunCommand", []interface{}{arg1, arg2, arg3})
	fake.runCommandMutex.Unlock()
	if fake.RunCommandStub != nil {
		return fake.RunCommandStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.runCommandReturns
	return fakeReturns.result1
}

func (fake *FakeDatabase) RunCommandCallCount() int {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	return len(fake.runCommandArgsForCall)
}

func (fake *FakeDatabase) RunCommandCalls(stub func(context.Context, interface{}, ...*mongo.RunCmdOptions) mongo.SingleResult) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = stub
}

func (fake *FakeDatabase) RunCommandArgsForCall(i int) (context.Context, interface{}, []*mongo.RunCmdOptions) {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	argsForCall := fake.runCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDatabase) RunCommandReturns(result1 mongo.SingleResult) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = nil
	fake.runCommandReturns = struct {
		result1 mongo.SingleResult
	}{result1}
}

func (fake *FakeDatabase) RunCommandReturnsOnCall(i int, result1 mongo.SingleResult) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = nil
	if fake.runCommandReturnsOnCall == nil {
		fake.runCommandReturnsOnCall = make(map[int]struct {
			result1 mongo.SingleResult
		})
	}
	fake.runCommandReturnsOnCall[i] = struct {
		result1 mongo.SingleResult
	}{result1}
}

func (fake *FakeDatabase) RunCommandCursor(arg1 context.Context, arg2 interface{}, arg3 ...*mongo.RunCmdOptions) (mongo.Cursor, error) {
	fake.runCommandCursorMutex.Lock()
	ret, specificReturn := fake.runCommandCursorReturnsOnCall[len(fake.runCommandCursorArgsForCall)]
	fake.runCommandCursorArgsForCall = append(fake.runCommandCursorArgsForCall, struct {
		arg1 context.Context
		arg2 interface{}
		arg3 []*mongo.RunCmdOptions
	}{arg1, arg2, arg3})
	fake.recordInvocation("RunCommandCursor", []interface{}{arg1, arg2, arg3})
	fake.runCommandCursorMutex.Unlock()
	if fake.RunCommandCursorStub != nil {
		return fake.RunCommandCursorStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runCommandCursorReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDatabase) RunCommandCursorCallCount() int {
	fake.runCommandCursorMutex.RLock()
	defer fake.runCommandCursorMutex.RUnlock()
	return len(fake.runCommandCursorArgsForCall)
}

func (fake *FakeDatabase) RunCommandCursorCalls(stub func(context.Context, interface{}, ...*mongo.RunCmdOptions) (mongo.Cursor, error)) {
	fake.runCommandCursorMutex.Lock()
	defer fake.runCommandCursorMutex.Unlock()
	fake.RunCommandCursorStub = stub
}

func (fake *FakeDatabase) RunCommandCursorArgsForCall(i int) (context.Context, interface{}, []*mongo.RunCmdOptions) {
	fake.runCommandCursorMutex.RLock()
	defer fake.runCommandCursorMutex.RUnlock()
	argsForCall := fake.runCommandCursorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDatabase) RunCommandCursorReturns(result1 mongo.Cursor, result2 error) {
	fake.runCommandCursorMutex.Lock()
	defer fake.runCommandCursorMutex.Unlock()
	fake.RunCommandCursorStub = nil
	fake.runCommandCursorReturns = struct {
		result1 mongo.Cursor
		result2 error
	}{result1, result2}
}

func (fake *FakeDatabase) RunCommandCursorReturnsOnCall(i int, result1 mongo.Cursor, result2 error) {
	fake.runCommandCursorMutex.Lock()
	defer fake.runCommandCursorMutex.Unlock()
	fake.RunCommandCursorStub = nil
	if fake.runCommandCursorReturnsOnCall == nil {
		fake.runCommandCursorReturnsOnCall = make(map[int]struct {
			result1 mongo.Cursor
			result2 error
		})
	}
	fake.runCommandCursorReturnsOnCall[i] = struct {
		result1 mongo.Cursor
		result2 error
	}{result1, result2}
}

func (fake *FakeDatabase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	fake.collectionMutex.RLock()
	defer fake.collectionMutex.RUnlock()
	fake.dropMutex.RLock()
	defer fake.dropMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	fake.runCommandCursorMutex.RLock()
	defer fake.runCommandCursorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDatabase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mongo.Database = new(FakeDatabase)
