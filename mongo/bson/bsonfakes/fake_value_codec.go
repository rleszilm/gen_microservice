// Code generated by counterfeiter. DO NOT EDIT.
package bsonfakes

import (
	"reflect"
	"sync"

	"github.com/rleszilm/genms/mongo/bson"
	"go.mongodb.org/mongo-driver/bson/bsoncodec"
	"go.mongodb.org/mongo-driver/bson/bsonrw"
)

type FakeValueCodec struct {
	DecodeValueStub        func(bsoncodec.DecodeContext, bsonrw.ValueReader, reflect.Value) error
	decodeValueMutex       sync.RWMutex
	decodeValueArgsForCall []struct {
		arg1 bsoncodec.DecodeContext
		arg2 bsonrw.ValueReader
		arg3 reflect.Value
	}
	decodeValueReturns struct {
		result1 error
	}
	decodeValueReturnsOnCall map[int]struct {
		result1 error
	}
	EncodeValueStub        func(bsoncodec.EncodeContext, bsonrw.ValueWriter, reflect.Value) error
	encodeValueMutex       sync.RWMutex
	encodeValueArgsForCall []struct {
		arg1 bsoncodec.EncodeContext
		arg2 bsonrw.ValueWriter
		arg3 reflect.Value
	}
	encodeValueReturns struct {
		result1 error
	}
	encodeValueReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeValueCodec) DecodeValue(arg1 bsoncodec.DecodeContext, arg2 bsonrw.ValueReader, arg3 reflect.Value) error {
	fake.decodeValueMutex.Lock()
	ret, specificReturn := fake.decodeValueReturnsOnCall[len(fake.decodeValueArgsForCall)]
	fake.decodeValueArgsForCall = append(fake.decodeValueArgsForCall, struct {
		arg1 bsoncodec.DecodeContext
		arg2 bsonrw.ValueReader
		arg3 reflect.Value
	}{arg1, arg2, arg3})
	fake.recordInvocation("DecodeValue", []interface{}{arg1, arg2, arg3})
	fake.decodeValueMutex.Unlock()
	if fake.DecodeValueStub != nil {
		return fake.DecodeValueStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.decodeValueReturns
	return fakeReturns.result1
}

func (fake *FakeValueCodec) DecodeValueCallCount() int {
	fake.decodeValueMutex.RLock()
	defer fake.decodeValueMutex.RUnlock()
	return len(fake.decodeValueArgsForCall)
}

func (fake *FakeValueCodec) DecodeValueCalls(stub func(bsoncodec.DecodeContext, bsonrw.ValueReader, reflect.Value) error) {
	fake.decodeValueMutex.Lock()
	defer fake.decodeValueMutex.Unlock()
	fake.DecodeValueStub = stub
}

func (fake *FakeValueCodec) DecodeValueArgsForCall(i int) (bsoncodec.DecodeContext, bsonrw.ValueReader, reflect.Value) {
	fake.decodeValueMutex.RLock()
	defer fake.decodeValueMutex.RUnlock()
	argsForCall := fake.decodeValueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeValueCodec) DecodeValueReturns(result1 error) {
	fake.decodeValueMutex.Lock()
	defer fake.decodeValueMutex.Unlock()
	fake.DecodeValueStub = nil
	fake.decodeValueReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeValueCodec) DecodeValueReturnsOnCall(i int, result1 error) {
	fake.decodeValueMutex.Lock()
	defer fake.decodeValueMutex.Unlock()
	fake.DecodeValueStub = nil
	if fake.decodeValueReturnsOnCall == nil {
		fake.decodeValueReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodeValueReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeValueCodec) EncodeValue(arg1 bsoncodec.EncodeContext, arg2 bsonrw.ValueWriter, arg3 reflect.Value) error {
	fake.encodeValueMutex.Lock()
	ret, specificReturn := fake.encodeValueReturnsOnCall[len(fake.encodeValueArgsForCall)]
	fake.encodeValueArgsForCall = append(fake.encodeValueArgsForCall, struct {
		arg1 bsoncodec.EncodeContext
		arg2 bsonrw.ValueWriter
		arg3 reflect.Value
	}{arg1, arg2, arg3})
	fake.recordInvocation("EncodeValue", []interface{}{arg1, arg2, arg3})
	fake.encodeValueMutex.Unlock()
	if fake.EncodeValueStub != nil {
		return fake.EncodeValueStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.encodeValueReturns
	return fakeReturns.result1
}

func (fake *FakeValueCodec) EncodeValueCallCount() int {
	fake.encodeValueMutex.RLock()
	defer fake.encodeValueMutex.RUnlock()
	return len(fake.encodeValueArgsForCall)
}

func (fake *FakeValueCodec) EncodeValueCalls(stub func(bsoncodec.EncodeContext, bsonrw.ValueWriter, reflect.Value) error) {
	fake.encodeValueMutex.Lock()
	defer fake.encodeValueMutex.Unlock()
	fake.EncodeValueStub = stub
}

func (fake *FakeValueCodec) EncodeValueArgsForCall(i int) (bsoncodec.EncodeContext, bsonrw.ValueWriter, reflect.Value) {
	fake.encodeValueMutex.RLock()
	defer fake.encodeValueMutex.RUnlock()
	argsForCall := fake.encodeValueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeValueCodec) EncodeValueReturns(result1 error) {
	fake.encodeValueMutex.Lock()
	defer fake.encodeValueMutex.Unlock()
	fake.EncodeValueStub = nil
	fake.encodeValueReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeValueCodec) EncodeValueReturnsOnCall(i int, result1 error) {
	fake.encodeValueMutex.Lock()
	defer fake.encodeValueMutex.Unlock()
	fake.EncodeValueStub = nil
	if fake.encodeValueReturnsOnCall == nil {
		fake.encodeValueReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.encodeValueReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeValueCodec) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodeValueMutex.RLock()
	defer fake.decodeValueMutex.RUnlock()
	fake.encodeValueMutex.RLock()
	defer fake.encodeValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeValueCodec) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bson.ValueCodec = new(FakeValueCodec)
