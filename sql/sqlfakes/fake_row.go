// Code generated by counterfeiter. DO NOT EDIT.
package sqlfakes

import (
	"sync"

	"github.com/rleszilm/genms/sql"
)

type FakeRow struct {
	ColumnsStub        func() ([]string, error)
	columnsMutex       sync.RWMutex
	columnsArgsForCall []struct {
	}
	columnsReturns struct {
		result1 []string
		result2 error
	}
	columnsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ErrStub        func() error
	errMutex       sync.RWMutex
	errArgsForCall []struct {
	}
	errReturns struct {
		result1 error
	}
	errReturnsOnCall map[int]struct {
		result1 error
	}
	MapScanStub        func(map[string]interface{}) error
	mapScanMutex       sync.RWMutex
	mapScanArgsForCall []struct {
		arg1 map[string]interface{}
	}
	mapScanReturns struct {
		result1 error
	}
	mapScanReturnsOnCall map[int]struct {
		result1 error
	}
	ScanStub        func(...interface{}) error
	scanMutex       sync.RWMutex
	scanArgsForCall []struct {
		arg1 []interface{}
	}
	scanReturns struct {
		result1 error
	}
	scanReturnsOnCall map[int]struct {
		result1 error
	}
	SliceScanStub        func() ([]interface{}, error)
	sliceScanMutex       sync.RWMutex
	sliceScanArgsForCall []struct {
	}
	sliceScanReturns struct {
		result1 []interface{}
		result2 error
	}
	sliceScanReturnsOnCall map[int]struct {
		result1 []interface{}
		result2 error
	}
	StructScanStub        func(interface{}) error
	structScanMutex       sync.RWMutex
	structScanArgsForCall []struct {
		arg1 interface{}
	}
	structScanReturns struct {
		result1 error
	}
	structScanReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRow) Columns() ([]string, error) {
	fake.columnsMutex.Lock()
	ret, specificReturn := fake.columnsReturnsOnCall[len(fake.columnsArgsForCall)]
	fake.columnsArgsForCall = append(fake.columnsArgsForCall, struct {
	}{})
	fake.recordInvocation("Columns", []interface{}{})
	fake.columnsMutex.Unlock()
	if fake.ColumnsStub != nil {
		return fake.ColumnsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.columnsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRow) ColumnsCallCount() int {
	fake.columnsMutex.RLock()
	defer fake.columnsMutex.RUnlock()
	return len(fake.columnsArgsForCall)
}

func (fake *FakeRow) ColumnsCalls(stub func() ([]string, error)) {
	fake.columnsMutex.Lock()
	defer fake.columnsMutex.Unlock()
	fake.ColumnsStub = stub
}

func (fake *FakeRow) ColumnsReturns(result1 []string, result2 error) {
	fake.columnsMutex.Lock()
	defer fake.columnsMutex.Unlock()
	fake.ColumnsStub = nil
	fake.columnsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRow) ColumnsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.columnsMutex.Lock()
	defer fake.columnsMutex.Unlock()
	fake.ColumnsStub = nil
	if fake.columnsReturnsOnCall == nil {
		fake.columnsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.columnsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRow) Err() error {
	fake.errMutex.Lock()
	ret, specificReturn := fake.errReturnsOnCall[len(fake.errArgsForCall)]
	fake.errArgsForCall = append(fake.errArgsForCall, struct {
	}{})
	fake.recordInvocation("Err", []interface{}{})
	fake.errMutex.Unlock()
	if fake.ErrStub != nil {
		return fake.ErrStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.errReturns
	return fakeReturns.result1
}

func (fake *FakeRow) ErrCallCount() int {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return len(fake.errArgsForCall)
}

func (fake *FakeRow) ErrCalls(stub func() error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = stub
}

func (fake *FakeRow) ErrReturns(result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	fake.errReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRow) ErrReturnsOnCall(i int, result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	if fake.errReturnsOnCall == nil {
		fake.errReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.errReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRow) MapScan(arg1 map[string]interface{}) error {
	fake.mapScanMutex.Lock()
	ret, specificReturn := fake.mapScanReturnsOnCall[len(fake.mapScanArgsForCall)]
	fake.mapScanArgsForCall = append(fake.mapScanArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("MapScan", []interface{}{arg1})
	fake.mapScanMutex.Unlock()
	if fake.MapScanStub != nil {
		return fake.MapScanStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.mapScanReturns
	return fakeReturns.result1
}

func (fake *FakeRow) MapScanCallCount() int {
	fake.mapScanMutex.RLock()
	defer fake.mapScanMutex.RUnlock()
	return len(fake.mapScanArgsForCall)
}

func (fake *FakeRow) MapScanCalls(stub func(map[string]interface{}) error) {
	fake.mapScanMutex.Lock()
	defer fake.mapScanMutex.Unlock()
	fake.MapScanStub = stub
}

func (fake *FakeRow) MapScanArgsForCall(i int) map[string]interface{} {
	fake.mapScanMutex.RLock()
	defer fake.mapScanMutex.RUnlock()
	argsForCall := fake.mapScanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRow) MapScanReturns(result1 error) {
	fake.mapScanMutex.Lock()
	defer fake.mapScanMutex.Unlock()
	fake.MapScanStub = nil
	fake.mapScanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRow) MapScanReturnsOnCall(i int, result1 error) {
	fake.mapScanMutex.Lock()
	defer fake.mapScanMutex.Unlock()
	fake.MapScanStub = nil
	if fake.mapScanReturnsOnCall == nil {
		fake.mapScanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mapScanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRow) Scan(arg1 ...interface{}) error {
	fake.scanMutex.Lock()
	ret, specificReturn := fake.scanReturnsOnCall[len(fake.scanArgsForCall)]
	fake.scanArgsForCall = append(fake.scanArgsForCall, struct {
		arg1 []interface{}
	}{arg1})
	fake.recordInvocation("Scan", []interface{}{arg1})
	fake.scanMutex.Unlock()
	if fake.ScanStub != nil {
		return fake.ScanStub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.scanReturns
	return fakeReturns.result1
}

func (fake *FakeRow) ScanCallCount() int {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return len(fake.scanArgsForCall)
}

func (fake *FakeRow) ScanCalls(stub func(...interface{}) error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = stub
}

func (fake *FakeRow) ScanArgsForCall(i int) []interface{} {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	argsForCall := fake.scanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRow) ScanReturns(result1 error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	fake.scanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRow) ScanReturnsOnCall(i int, result1 error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	if fake.scanReturnsOnCall == nil {
		fake.scanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRow) SliceScan() ([]interface{}, error) {
	fake.sliceScanMutex.Lock()
	ret, specificReturn := fake.sliceScanReturnsOnCall[len(fake.sliceScanArgsForCall)]
	fake.sliceScanArgsForCall = append(fake.sliceScanArgsForCall, struct {
	}{})
	fake.recordInvocation("SliceScan", []interface{}{})
	fake.sliceScanMutex.Unlock()
	if fake.SliceScanStub != nil {
		return fake.SliceScanStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.sliceScanReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRow) SliceScanCallCount() int {
	fake.sliceScanMutex.RLock()
	defer fake.sliceScanMutex.RUnlock()
	return len(fake.sliceScanArgsForCall)
}

func (fake *FakeRow) SliceScanCalls(stub func() ([]interface{}, error)) {
	fake.sliceScanMutex.Lock()
	defer fake.sliceScanMutex.Unlock()
	fake.SliceScanStub = stub
}

func (fake *FakeRow) SliceScanReturns(result1 []interface{}, result2 error) {
	fake.sliceScanMutex.Lock()
	defer fake.sliceScanMutex.Unlock()
	fake.SliceScanStub = nil
	fake.sliceScanReturns = struct {
		result1 []interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeRow) SliceScanReturnsOnCall(i int, result1 []interface{}, result2 error) {
	fake.sliceScanMutex.Lock()
	defer fake.sliceScanMutex.Unlock()
	fake.SliceScanStub = nil
	if fake.sliceScanReturnsOnCall == nil {
		fake.sliceScanReturnsOnCall = make(map[int]struct {
			result1 []interface{}
			result2 error
		})
	}
	fake.sliceScanReturnsOnCall[i] = struct {
		result1 []interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeRow) StructScan(arg1 interface{}) error {
	fake.structScanMutex.Lock()
	ret, specificReturn := fake.structScanReturnsOnCall[len(fake.structScanArgsForCall)]
	fake.structScanArgsForCall = append(fake.structScanArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("StructScan", []interface{}{arg1})
	fake.structScanMutex.Unlock()
	if fake.StructScanStub != nil {
		return fake.StructScanStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.structScanReturns
	return fakeReturns.result1
}

func (fake *FakeRow) StructScanCallCount() int {
	fake.structScanMutex.RLock()
	defer fake.structScanMutex.RUnlock()
	return len(fake.structScanArgsForCall)
}

func (fake *FakeRow) StructScanCalls(stub func(interface{}) error) {
	fake.structScanMutex.Lock()
	defer fake.structScanMutex.Unlock()
	fake.StructScanStub = stub
}

func (fake *FakeRow) StructScanArgsForCall(i int) interface{} {
	fake.structScanMutex.RLock()
	defer fake.structScanMutex.RUnlock()
	argsForCall := fake.structScanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRow) StructScanReturns(result1 error) {
	fake.structScanMutex.Lock()
	defer fake.structScanMutex.Unlock()
	fake.StructScanStub = nil
	fake.structScanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRow) StructScanReturnsOnCall(i int, result1 error) {
	fake.structScanMutex.Lock()
	defer fake.structScanMutex.Unlock()
	fake.StructScanStub = nil
	if fake.structScanReturnsOnCall == nil {
		fake.structScanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.structScanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRow) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.columnsMutex.RLock()
	defer fake.columnsMutex.RUnlock()
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	fake.mapScanMutex.RLock()
	defer fake.mapScanMutex.RUnlock()
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	fake.sliceScanMutex.RLock()
	defer fake.sliceScanMutex.RUnlock()
	fake.structScanMutex.RLock()
	defer fake.structScanMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRow) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sql.Row = new(FakeRow)
