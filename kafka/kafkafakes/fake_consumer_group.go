// Code generated by counterfeiter. DO NOT EDIT.
package kafkafakes

import (
	"context"
	"sync"

	"github.com/Shopify/sarama"
	"github.com/rleszilm/genms/kafka"
)

type FakeConsumerGroup struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ConsumeStub        func(context.Context, []string, sarama.ConsumerGroupHandler) error
	consumeMutex       sync.RWMutex
	consumeArgsForCall []struct {
		arg1 context.Context
		arg2 []string
		arg3 sarama.ConsumerGroupHandler
	}
	consumeReturns struct {
		result1 error
	}
	consumeReturnsOnCall map[int]struct {
		result1 error
	}
	ErrorsStub        func() <-chan error
	errorsMutex       sync.RWMutex
	errorsArgsForCall []struct {
	}
	errorsReturns struct {
		result1 <-chan error
	}
	errorsReturnsOnCall map[int]struct {
		result1 <-chan error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConsumerGroup) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *FakeConsumerGroup) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeConsumerGroup) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeConsumerGroup) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumerGroup) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumerGroup) Consume(arg1 context.Context, arg2 []string, arg3 sarama.ConsumerGroupHandler) error {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.consumeMutex.Lock()
	ret, specificReturn := fake.consumeReturnsOnCall[len(fake.consumeArgsForCall)]
	fake.consumeArgsForCall = append(fake.consumeArgsForCall, struct {
		arg1 context.Context
		arg2 []string
		arg3 sarama.ConsumerGroupHandler
	}{arg1, arg2Copy, arg3})
	fake.recordInvocation("Consume", []interface{}{arg1, arg2Copy, arg3})
	fake.consumeMutex.Unlock()
	if fake.ConsumeStub != nil {
		return fake.ConsumeStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.consumeReturns
	return fakeReturns.result1
}

func (fake *FakeConsumerGroup) ConsumeCallCount() int {
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	return len(fake.consumeArgsForCall)
}

func (fake *FakeConsumerGroup) ConsumeCalls(stub func(context.Context, []string, sarama.ConsumerGroupHandler) error) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = stub
}

func (fake *FakeConsumerGroup) ConsumeArgsForCall(i int) (context.Context, []string, sarama.ConsumerGroupHandler) {
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	argsForCall := fake.consumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeConsumerGroup) ConsumeReturns(result1 error) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = nil
	fake.consumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumerGroup) ConsumeReturnsOnCall(i int, result1 error) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = nil
	if fake.consumeReturnsOnCall == nil {
		fake.consumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.consumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumerGroup) Errors() <-chan error {
	fake.errorsMutex.Lock()
	ret, specificReturn := fake.errorsReturnsOnCall[len(fake.errorsArgsForCall)]
	fake.errorsArgsForCall = append(fake.errorsArgsForCall, struct {
	}{})
	fake.recordInvocation("Errors", []interface{}{})
	fake.errorsMutex.Unlock()
	if fake.ErrorsStub != nil {
		return fake.ErrorsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.errorsReturns
	return fakeReturns.result1
}

func (fake *FakeConsumerGroup) ErrorsCallCount() int {
	fake.errorsMutex.RLock()
	defer fake.errorsMutex.RUnlock()
	return len(fake.errorsArgsForCall)
}

func (fake *FakeConsumerGroup) ErrorsCalls(stub func() <-chan error) {
	fake.errorsMutex.Lock()
	defer fake.errorsMutex.Unlock()
	fake.ErrorsStub = stub
}

func (fake *FakeConsumerGroup) ErrorsReturns(result1 <-chan error) {
	fake.errorsMutex.Lock()
	defer fake.errorsMutex.Unlock()
	fake.ErrorsStub = nil
	fake.errorsReturns = struct {
		result1 <-chan error
	}{result1}
}

func (fake *FakeConsumerGroup) ErrorsReturnsOnCall(i int, result1 <-chan error) {
	fake.errorsMutex.Lock()
	defer fake.errorsMutex.Unlock()
	fake.ErrorsStub = nil
	if fake.errorsReturnsOnCall == nil {
		fake.errorsReturnsOnCall = make(map[int]struct {
			result1 <-chan error
		})
	}
	fake.errorsReturnsOnCall[i] = struct {
		result1 <-chan error
	}{result1}
}

func (fake *FakeConsumerGroup) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	fake.errorsMutex.RLock()
	defer fake.errorsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConsumerGroup) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafka.ConsumerGroup = new(FakeConsumerGroup)
