package cache

import (
	"bytes"
	"fmt"
	"path"
	"strings"
	"text/template"

	"github.com/go-test/deep"
	"github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/annotations"
	"github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/generator"
	"golang.org/x/tools/imports"
	"google.golang.org/protobuf/compiler/protogen"
)

// Cache is a struct that generates an base cache file.
type Cache struct {
	File    *File
	Message *generator.Message
	Fields  *generator.Fields
	Queries *generator.Queries
	Opts    *annotations.DalOptions

	plugin   *protogen.Plugin
	filename string
}

// NewCache returns a new updater renderer.
func NewCache(plugin *protogen.Plugin, file *protogen.File, msg *protogen.Message, opts *annotations.DalOptions) *Cache {
	base := path.Base(file.GeneratedFilenamePrefix)
	dir := path.Dir(file.GeneratedFilenamePrefix)
	filename := path.Join(dir, fmt.Sprintf("dal/keyvalue/cache/%s.genms.cache.%s.go", base, strings.ToLower(msg.GoIdent.GoName)))
	outfile := plugin.NewGeneratedFile(filename, ".")

	cfile := NewFile(outfile, file)
	cmsg := generator.NewMessage(cfile.Generator(), msg)
	cfields := generator.NewFields(cmsg)
	cqueries := generator.NewQueries(cfile.Generator(), cfields, opts)

	return &Cache{
		File:     cfile,
		Message:  cmsg,
		Fields:   cfields,
		Queries:  cqueries,
		Opts:     opts,
		plugin:   plugin,
		filename: filename,
	}
}

// GenerateCache generates the updater for the collection.
func GenerateCache(plugin *protogen.Plugin, file *protogen.File, msg *protogen.Message, opts *annotations.DalOptions) error {
	c := NewCache(plugin, file, msg, opts)
	return c.render()
}

func (c *Cache) render() error {
	steps := []func() error{
		c.definePackage,
		c.defineCollection,
	}

	for _, s := range steps {
		if err := s(); err != nil {
			return err
		}
	}

	outfile := c.File.Outfile()
	original, err := outfile.Content()
	if err != nil {
		return err
	}
	formatted, err := imports.Process(c.filename, original, nil)

	if diff := deep.Equal(original, formatted); diff != nil {
		formattedOutfile := c.plugin.NewGeneratedFile(c.filename, ".")
		if _, err := formattedOutfile.Write(formatted); err != nil {
			return err
		}
		outfile.Skip()
	}

	return nil
}

func (c *Cache) definePackage() error {
	tmplSrc := `// Package {{ .File.CachePackageName }} is generated by protoc-gen-go-genms-dal. *DO NOT EDIT*
package {{ .File.CachePackageName }}
`

	tmpl, err := template.New("defineCachePackage").
		Funcs(template.FuncMap{}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, c); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *Cache) defineCollection() error {
	tmplSrc := `{{- $C := .C -}}
{{- $P := .P -}}

// Nil{{ .C.Message.Name }}Cache is a KV ReadWriter that takes no action on read or write.
type Nil{{ .C.Message.Name }}Cache struct{
}

// GetAll implements {{ .P.KeyValue }}.{{ .C.Message.Name }}ReadAller.
func (x *Nil{{ .C.Message.Name }}Cache) All(_ {{ .P.Context }}.Context) (*{{ .C.Message.QualifiedKind }}, error) {
	return nil, nil
}


// GetByKey implements {{ .P.KeyValue }}.{{ .C.Message.Name }}Reader.
func (x *Nil{{ .C.Message.Name }}Cache) GetByKey(_ {{ .P.Context }}.Context, _ {{ .P.KeyValue }}.{{ .C.Message.Name }}Key) (*{{ .C.Message.QualifiedKind }}, error) {
	return nil, nil
}

// SetByKey implements {{ .P.KeyValue }}.{{ .C.Message.Name }}Writer.
func (x *Nil{{ .C.Message.Name }}Cache) SetByKey(_ {{ .P.Context }}.Context, _ {{ .P.KeyValue }}.{{ .C.Message.Name }}Key, _ *{{ .C.Message.QualifiedKind }}) (*{{ .C.Message.QualifiedKind }}, error) {
	return nil, nil
}

`

	tmpl, err := template.New("defineCache").
		Funcs(template.FuncMap{}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Context":  c.File.QualifiedPackageName("context"),
		"KeyValue": c.File.QualifiedPackageName(path.Join(c.File.DalPackagePath(), "keyvalue")),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}
