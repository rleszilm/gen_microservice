package keyvalue

import (
	"bytes"
	"fmt"
	"path"
	"strings"
	"text/template"

	"github.com/go-test/deep"
	"github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/annotations"
	"github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/generator"
	"golang.org/x/tools/imports"
	"google.golang.org/protobuf/compiler/protogen"
)

// KeyValue is a struct that generates an base cache file.
type KeyValue struct {
	File    *File
	Message *generator.Message
	Fields  *generator.Fields
	Queries *generator.Queries
	Opts    *annotations.DalOptions

	plugin   *protogen.Plugin
	filename string
}

// NewKeyValue returns a new updater renderer.
func NewKeyValue(plugin *protogen.Plugin, file *protogen.File, msg *protogen.Message, opts *annotations.DalOptions) *KeyValue {
	base := path.Base(file.GeneratedFilenamePrefix)
	dir := path.Dir(file.GeneratedFilenamePrefix)
	filename := path.Join(dir, fmt.Sprintf("dal/keyvalue/%s.genms.kvs.%s.go", base, strings.ToLower(msg.GoIdent.GoName)))
	outfile := plugin.NewGeneratedFile(filename, ".")

	cfile := NewFile(outfile, file)
	cmsg := generator.NewMessage(cfile.Generator(), msg)
	cfields := generator.NewFields(cmsg)
	cqueries := generator.NewQueries(cfile.Generator(), cfields, opts)

	return &KeyValue{
		File:     cfile,
		Message:  cmsg,
		Fields:   cfields,
		Queries:  cqueries,
		Opts:     opts,
		plugin:   plugin,
		filename: filename,
	}
}

// GenerateKeyValue generates the updater for the collection.
func GenerateKeyValue(plugin *protogen.Plugin, file *protogen.File, msg *protogen.Message, opts *annotations.DalOptions) error {
	c := NewKeyValue(plugin, file, msg, opts)
	return c.render()
}

func (c *KeyValue) render() error {
	steps := []func() error{
		c.definePackage,
		c.defineCollection,
	}

	for _, s := range steps {
		if err := s(); err != nil {
			return err
		}
	}

	outfile := c.File.Outfile()
	original, err := outfile.Content()
	if err != nil {
		return err
	}
	formatted, err := imports.Process(c.filename, original, nil)

	if diff := deep.Equal(original, formatted); diff != nil {
		formattedOutfile := c.plugin.NewGeneratedFile(c.filename, ".")
		if _, err := formattedOutfile.Write(formatted); err != nil {
			return err
		}
		outfile.Skip()
	}

	return nil
}

func (c *KeyValue) definePackage() error {
	tmplSrc := `// Package {{ .File.KeyValuePackageName }} is generated by protoc-gen-go-genms-dal. *DO NOT EDIT*
package {{ .File.KeyValuePackageName }}
`

	tmpl, err := template.New("defineKeyValuePackage").
		Funcs(template.FuncMap{}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, c); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *KeyValue) defineCollection() error {
	tmplSrc := `{{- $C := .C -}}
{{- $P := .P -}}
{{- $Generate := "go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 ." -}}
// {{ .C.Message.Name }}Key defines a Key in the kv store.
type {{ .C.Message.Name }}Key interface{}

// {{ .C.Message.Name }}Reader is defines the interface for getting values from a KV store.
//{{ $Generate }} {{ .C.Message.Name }}Reader
type {{ .C.Message.Name }}Reader interface {
	GetByKey({{ .P.Context }}.Context, {{ .C.Message.Name }}Key) (*{{ .C.Message.QualifiedKind }}, error)
}

// {{ .C.Message.Name }}ReadeAllr is defines the interface for getting values from a KV store.
//{{ $Generate }} {{ .C.Message.Name }}ReadAller
type {{ .C.Message.Name }}ReadAller interface {
	{{ .C.Message.Name }}Reader
	All({{ .P.Context }}.Context) ([]*{{ .C.Message.QualifiedKind }}, error)
}

// {{ .C.Message.Name }}Writer is defines the interface for setting values in a KV store.
//{{ $Generate }} {{ .C.Message.Name }}Writer
type {{ .C.Message.Name }}Writer interface {
	SetByKey({{ .P.Context }}.Context, {{ .C.Message.Name }}Key, *{{ .C.Message.QualifiedKind }}) (error)
}

// {{ .C.Message.Name }}ReadWriter is defines the interface for setting values in a KV store.
//{{ $Generate }} {{ .C.Message.Name }}ReadWriter
type {{ .C.Message.Name }}ReadWriter interface {
	{{ .C.Message.Name }}Reader
	{{ .C.Message.Name }}Writer
}

// {{ .C.Message.Name }}KeyFunc is a function that generates a unique deterministic key for the {{ .C.Message.QualifiedKind }}.
type {{ .C.Message.Name }}KeyFunc func(*{{ .C.Message.QualifiedKind }}) interface{}

`

	tmpl, err := template.New("defineKeyValue").
		Funcs(template.FuncMap{}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Context": c.File.QualifiedPackageName("context"),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}
