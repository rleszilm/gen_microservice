package generator

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"

	"github.com/rleszilm/gen_microservice/cmd/protoc-gen-go-genms-dal/annotations"
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	interfaceTemplateSource = `// Generated by protoc-gen-go-gsnms-dal. *DO NOT EDIT*
package dal_{{ .file.GoPackageName }}

import(
	"context"
	"errors"
)

{{ with $state := . }}

var (
	// Err{{ .msg.GoIdent.GoName }}CollectionMethodImpl is returned when the called method is not implemented.
	Err{{ .msg.GoIdent.GoName }}CollectionMethodImpl = errors.New("{{ .msg.GoIdent.GoName }}Collection method is not implemented")
)

// {{ .msg.GoIdent.GoName }}Collection is an autogenerated interface that can be used to interact with a collection
// of {{ .msg.GoIdent.GoName }} objects.
type {{ .msg.GoIdent.GoName }}Collection interface {
	{{ .msg.GoIdent.GoName }}CollectionReader
	{{ .msg.GoIdent.GoName }}CollectionWriter
}

// {{ .msg.GoIdent.GoName }}CollectionWriter is an autogenerated interface that can be used to write to a collection
// of {{ .msg.GoIdent.GoName }} objects.
type {{ .msg.GoIdent.GoName }}CollectionWriter interface {
	Upsert(context.Context, *{{ .qualifiedType }}) (*{{ .qualifiedType }}, error)
}

// {{ .msg.GoIdent.GoName }}CollectionReader is an autogenerated interface that can be used to query a collection
// of {{ .msg.GoIdent.GoName }} objects. The queries and their values are taken from the representative proto
// message.
type {{ .msg.GoIdent.GoName }}CollectionReader interface {
	All(context.Context) ([]*{{ .qualifiedType }}, error)
	Filter(context.Context, *{{ .msg.GoIdent.GoName }}Fields) ([]*{{ .qualifiedType }}, error)
	{{- with $state := . }}
		{{ range .opts.Queries -}}
			{{ toTitleCase .Name }}(context.Context{{ range .Fields -}}, {{ toFieldType . $state.msg }} {{- end }}) ([]*{{ $state.qualifiedType }}, error)
		{{ end }}
	{{ end }}
}

// {{ .msg.GoIdent.GoName }}Fields is an autogenerated struct that
// can be used in the generic queries against {{ .msg.GoIdent.GoName }}Collection.
type {{ .msg.GoIdent.GoName }}Fields struct {
	{{ range .fields -}}
		{{ .GoName }} *{{ toGoType .Desc.Kind -}} ` + "`" + `json:"{{ toSnakeCase .GoName }},omitempty"` + "`" + `
	{{ end -}}
}

// Unimplemented{{ .msg.GoIdent.GoName }}Collection is an autogenerated implementation of
// dal_{{ .file.GoPackageName }}.{{ .msg.GoIdent.GoName }}Collection that returns an error when any
// method is called.
type Unimplemented{{ .msg.GoIdent.GoName }}Collection struct {
}

// Upsert implements dal_{{ $state.file.GoPackageName }}.{{ $state.msg.GoIdent.GoName }}Collection.Upsert
func (x *Unimplemented{{ $state.msg.GoIdent.GoName }}Collection) Upsert(_ context.Context, _ *{{ .qualifiedType }}) (*{{ .qualifiedType }}, error) {
	return nil, Err{{ $state.msg.GoIdent.GoName }}CollectionMethodImpl
}

// Filter implements dal_{{ $state.file.GoPackageName }}.{{ $state.msg.GoIdent.GoName }}Collection.Filter
func (x *Unimplemented{{ $state.msg.GoIdent.GoName }}Collection) Filter(_ context.Context, _ *{{ $state.msg.GoIdent.GoName }}Fields) ([]*{{ .qualifiedType }}, error) {
	return nil, Err{{ $state.msg.GoIdent.GoName }}CollectionMethodImpl
}

{{ range .opts.Queries -}}
	// {{ toTitleCase .Name }} implements dal_{{ $state.file.GoPackageName }}.{{ $state.msg.GoIdent.GoName }}Collection.{{ toTitleCase .Name }}
	func (x *Unimplemented{{ $state.msg.GoIdent.GoName }}Collection){{ toTitleCase .Name }}(ctx context.Context{{ range .Fields -}}, _ {{ toFieldType . $state.msg }} {{- end }}) ([]*{{ $state.qualifiedType }}, error) {
		return nil, Err{{ $state.msg.GoIdent.GoName }}CollectionMethodImpl
	}
{{ end }}
{{ end }}
`
)

var (
	interfaceTemplate = template.Must(
		template.New("interface").
			Funcs(template.FuncMap{
				"toTitleCase": ToTitleCase,
				"toSnakeCase": ToSnakeCase,
				"toFieldType": ToFieldType,
				"toGoType":    ToGoType,
			}).
			Parse(interfaceTemplateSource))
)

// GenerateInterface generates the dal interface for the collection
func GenerateInterface(plugin *protogen.Plugin, file *protogen.File, msg *protogen.Message, opts *annotations.DalOptions) error {
	filename := fmt.Sprintf("dal/%s.genms.dal.%s.go", file.GeneratedFilenamePrefix, strings.ToLower(msg.GoIdent.GoName))
	outFile := plugin.NewGeneratedFile(filename, ".")
	qualifiedType := outFile.QualifiedGoIdent(msg.GoIdent)

	fields := []*protogen.Field{}
	for _, f := range msg.Fields {
		fields = append(fields, f)
	}

	model := map[string]interface{}{
		"file":          file,
		"msg":           msg,
		"opts":          opts,
		"fields":        fields,
		"qualifiedType": qualifiedType,
	}

	buf := &bytes.Buffer{}
	if err := interfaceTemplate.Execute(buf, model); err != nil {
		return err
	}

	if _, err := outFile.Write(buf.Bytes()); err != nil {
		return err
	}

	return nil
}
