package mongo

import (
	"bytes"
	"fmt"
	"path"
	"strings"
	"text/template"

	"github.com/go-test/deep"
	"github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/annotations"
	protocgenlib "github.com/rleszilm/genms/internal/protoc-gen-lib"
	"golang.org/x/tools/imports"
	"google.golang.org/protobuf/compiler/protogen"
)

// Collection is a struct that generates a collection file.
type Collection struct {
	File    *File
	Message *Message
	Fields  *Fields
	Queries *Queries
	Opts    *annotations.DalOptions

	plugin   *protogen.Plugin
	filename string
}

// NewCollection returns a new collection renderer.
func NewCollection(plugin *protogen.Plugin, file *protogen.File, msg *protogen.Message, opts *annotations.DalOptions) *Collection {
	base := path.Base(file.GeneratedFilenamePrefix)
	dir := path.Dir(file.GeneratedFilenamePrefix)
	filename := path.Join(dir, fmt.Sprintf("dal/mongo/%s.genms.dal.%s.go", base, strings.ToLower(msg.GoIdent.GoName)))
	outfile := plugin.NewGeneratedFile(filename, ".")

	cfile := NewFile(outfile, file)
	cmsg := NewMessage(cfile, msg)
	cfields := NewFields(cmsg)
	cqueries := NewQueries(cfile, cfields, opts)

	return &Collection{
		File:     cfile,
		Message:  cmsg,
		Fields:   cfields,
		Queries:  cqueries,
		Opts:     opts,
		plugin:   plugin,
		filename: filename,
	}
}

func (c *Collection) render() error {
	steps := []func() error{
		c.definePackage,
		c.defineConfig,
		c.defineInternalStructs,
		c.defineCollection,
		c.defineService,
		c.defineDefaultQueries,
		c.defineQueries,
		c.defineNewCollection,
	}

	for _, s := range steps {
		if err := s(); err != nil {
			return err
		}
	}

	outfile := c.File.Outfile()
	original, err := outfile.Content()
	if err != nil {
		return err
	}
	formatted, err := imports.Process(c.filename, original, nil)

	if diff := deep.Equal(original, formatted); diff != nil {
		formattedOutfile := c.plugin.NewGeneratedFile(c.filename, ".")
		if _, err := formattedOutfile.Write(formatted); err != nil {
			return err
		}
		outfile.Skip()
	}

	return nil
}

func (c *Collection) definePackage() error {
	tmplSrc := `// Package {{ .File.MongoPackageName }} is generated by protoc-gen-go-genms-dal. *DO NOT EDIT*
package {{ .File.MongoPackageName }}
`

	tmpl, err := template.New("defineMongoPackage").
		Funcs(template.FuncMap{}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, c); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *Collection) defineCollection() error {
	tmplSrc := `{{- $C := .C -}}
{{- $P := .P -}}

// {{ .C.Message.Name }}Collection is an autogenerated implementation of {{ .C.Message.QualifiedDalKind }}Collection.
type {{ .C.Message.Name }}Collection struct {
	{{ .P.Collection }}.Unimplemented{{ .C.Message.Name }}Collection

	name string
	client {{ .P.Mongo }}.Client
	config *{{ .C.Message.Name }}Config
}
`

	tmpl, err := template.New("defineMongoCollection").
		Funcs(template.FuncMap{
			"ToTitleCase": protocgenlib.ToTitleCase,
		}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Collection": c.File.QualifiedPackageName(c.File.DalPackagePath()),
		"Mongo":      c.File.QualifiedPackageName("github.com/rleszilm/genms/mongo"),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *Collection) defineService() error {
	tmplSrc := `// Initialize initializes and starts the service. Initialize should panic in case of
// any errors. It is intended that Initialize be called only once during the service life-cycle.
func (x *{{ .C.Message.Name }}Collection) Initialize(_ {{ .P.Context }}.Context) error {
	return nil
}

// Shutdown closes the long-running instance, or service.
func (x *{{ .C.Message.Name }}Collection) Shutdown(_ {{ .P.Context }}.Context) error {
	return nil
}

// NameOf returns the name of a service. This must be unique if there are multiple instances of the same
// service.
func (x *{{ .C.Message.Name }}Collection) NameOf() string {
	return "{{ .C.File.MongoPackageName }}_" + x.config.Name
}

// String returns a string identifier for the service.
func (x *{{ .C.Message.Name }}Collection) String() string {
	return x.NameOf()
}
`

	tmpl, err := template.New("defineMongoService").
		Funcs(template.FuncMap{}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Context": c.File.QualifiedPackageName("context"),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *Collection) defineDefaultQueries() error {
	tmplSrc := `// find scans the collection for records matching the filter. 
func (x *{{ .C.Message.Name }}Collection) find(ctx {{ .P.Context }}.Context, label string, filter interface{}, opts ...*{{ .P.Mongo }}.FindOptions) ([]*{{ .C.Message.QualifiedKind }}, error) {
	ctx, cancel := {{ .P.Context }}.WithTimeout(ctx, x.config.Timeout)
	defer cancel()

	ctx, _ = {{ .P.Tag }}.New(ctx,
		{{ .P.Tag }}.Upsert({{ .P.Mongo }}.TagCollection, "{{ ToSnakeCase .C.Message.Name }}"),
		{{ .P.Tag }}.Upsert({{ .P.Mongo }}.TagInstance, x.name),
		{{ .P.Tag }}.Upsert({{ .P.Mongo }}.TagMethod, label),
	)
	{{ .P.Stats }}.Record(ctx, {{ .P.Mongo }}.MeasureInflight.M(1))
	start := {{ .P.Time }}.Now()
	defer func(ctx {{ .P.Context }}.Context) {
		stop := time.Now()
		dur := float64(stop.Sub(start).Nanoseconds()) / float64({{ .P.Time }}.Millisecond)
		{{ .P.Stats }}.Record(ctx, {{ .P.Mongo }}.MeasureLatency.M(dur), {{ .P.Mongo }}.MeasureInflight.M(-1))
	}(ctx)

	cur, err := x.client.
		Database(x.config.Database).
		Collection(x.config.Collection).
		Find(ctx, filter, {{ ToLower .C.Message.Name }}Projection, opts...)
	if err != nil {
		{{ .P.Mongo }}.Logs().Error("could not execute rest request:", err)
		{{ .P.Stats }}.Record(ctx, {{ .P.Mongo }}.MeasureError.M(1))
		return nil, err
	}

	vals := []*{{ .C.Message.QualifiedKind }}{}
	for cur.Next(ctx) {
		obj := &{{ .C.Message.Name }}Scanner{}
		if err = cur.Decode(obj); err != nil {
			{{ .P.Mongo }}.Logs().Errorf("could not parse %s - %v", label, err)
			{{ .P.Stats }}.Record(ctx, {{ .P.Mongo }}.MeasureError.M(1))
			return nil, err
		}
		vals = append(vals, obj.{{ .C.Message.Name }}())
	}

	return vals, nil
}

// All implements {{ .C.Message.QualifiedDalKind }}Collection.All
func (x *{{ .C.Message.Name }}Collection) All(ctx {{ .P.Context }}.Context) ([]*{{ .C.Message.QualifiedKind }}, error) {	
	return x.find(ctx, "all", {{ .P.Bson }}.M{})
}

// Filter implements {{ .C.Message.Name }}CollectionReader
func (x *{{ .C.Message.Name }}Collection) Filter({{ .P.Context }}.Context, *{{ .P.Collection }}.{{ .C.Message.Name }}FieldValues) ([]*{{ .C.Message.QualifiedKind }}, error) {
	return nil, nil
}

// Insert implements {{ .C.Message.Name }}CollectionWriter
func (x *{{ .C.Message.Name }}Collection) Insert({{ .P.Context }}.Context, *{{ .C.Message.QualifiedKind }}) (*{{ .C.Message.QualifiedKind }}, error) {
	return nil, nil
}

// Upsert implements {{ .C.Message.Name }}CollectionWriter
func (x *{{ .C.Message.Name }}Collection) Upsert({{ .P.Context }}.Context, *{{ .C.Message.QualifiedKind }}) (*{{ .C.Message.QualifiedKind }}, error) {
	return nil, nil
}

// Update implements {{ .C.Message.Name }}CollectionWriter
func (x *{{ .C.Message.Name }}Collection) Update({{ .P.Context }}.Context, *{{ .C.Message.QualifiedKind }}, *{{ .P.Collection }}.{{ .C.Message.Name }}FieldValues) (*{{ .C.Message.QualifiedKind }}, error){
	return nil, nil
}

`

	tmpl, err := template.New("defineMongoDefaultQueries").
		Funcs(template.FuncMap{
			"ToCamelCase": protocgenlib.ToCamelCase,
			"ToLower":     strings.ToLower,
			"ToSnakeCase": protocgenlib.ToSnakeCase,
			"ToTitleCase": protocgenlib.ToTitleCase,
		}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Context":    c.File.QualifiedPackageName("context"),
		"Collection": c.File.QualifiedPackageName(c.File.DalPackagePath()),
		"Bson":       c.File.QualifiedPackageName("github.com/rleszilm/genms/mongo/bson"),
		"Mongo":      c.File.QualifiedPackageName("github.com/rleszilm/genms/mongo"),
		"Stats":      c.File.QualifiedPackageName("go.opencensus.io/stats"),
		"Tag":        c.File.QualifiedPackageName("go.opencensus.io/tag"),
		"Time":       c.File.QualifiedPackageName("time"),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *Collection) defineQueries() error {
	tmplSrc := `{{- $C := .C -}}
{{- $P := .P -}}
{{ range $qn := .C.Queries.Names }}
	{{- $q := ($C.Queries.ByName $qn) -}}
	{{- if $q.QueryProvided }}
		// {{ ToTitleCase $q.Name }} implements {{ $C.Message.QualifiedDalKind }}Collection.{{ ToTitleCase $q.Name }}
		func (x *{{ $C.Message.Name }}Collection){{ ToTitleCase $q.Name }}(ctx {{ $P.Context }}.Context
			{{- range $a := $q.Args -}}
				{{- $arg := (Arg $C.File $C.Fields $a) -}}
				, {{ ToSnakeCase $arg.Name }} {{ $arg.QualifiedKind }}
			{{- end -}}
		) ([]*{{ $C.Message.QualifiedKind }}, error) {
			filter := {{ $P.Bson }}.M{
			{{ range $a := $q.Args }}
				{{- $arg := (Arg $C.File $C.Fields $a) -}}
				"{{ $arg.QueryName }}": {{ ToSnakeCase $arg.Name }},
			{{- end }}
			}
						
			return x.find(ctx, "{{ ToSnakeCase $q.Name }}", filter)
		}
	{{- end -}}
{{- end }}
`

	tmpl, err := template.New("defineMongoQueries").
		Funcs(template.FuncMap{
			"Arg":         NewArg,
			"ToCamelCase": protocgenlib.ToCamelCase,
			"ToSnakeCase": protocgenlib.ToSnakeCase,
			"ToTitleCase": protocgenlib.ToTitleCase,
		}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Bson":    c.File.QualifiedPackageName("github.com/rleszilm/genms/mongo/bson"),
		"Context": c.File.QualifiedPackageName("context"),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *Collection) defineNewCollection() error {
	tmplSrc := `{{- $C := .C -}}
{{- $P := .P -}}
// New{{ .C.Message.Name }}Collection returns a new {{ .C.Message.Name }}Collection.
func New{{ .C.Message.Name }}Collection(instance string, client {{ .P.Mongo }}.Client, config *{{ .C.Message.Name }}Config) (*{{ .C.Message.Name }}Collection, error) {
	coll := &{{ .C.Message.Name }}Collection{
		name: instance,
		client: client,
		config: config,
	}

	return coll, nil
}
`

	tmpl, err := template.New("defineMongoNewCollection").
		Funcs(template.FuncMap{
			"ToSnakeCase": protocgenlib.ToSnakeCase,
			"ToTitleCase": protocgenlib.ToTitleCase,
		}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Mongo": c.File.QualifiedPackageName("github.com/rleszilm/genms/mongo"),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *Collection) defineInternalStructs() error {
	tmplSrc := `{{- $C := .C -}}
var (
	{{ ToLower .C.Message.Name }}Projection = {{ .P.Bson }}.M{
		{{ range $n := .C.Fields.Names -}}
			{{- $f := ($C.Fields.ByName $n) -}}
			{{- if not $f.Ignore -}}
				"{{ $f.Name }}": 1,
			{{- end }}
		{{ end -}}
	}
)

// {{ .C.Message.Name }}Scanner is an autogenerated struct that
// is used to parse query results.
type {{ .C.Message.Name }}Scanner struct {
	{{ range $n := .C.Fields.Names -}}
		{{- $f := ($C.Fields.ByName $n) -}}
		{{- if not $f.Ignore -}}
			{{ ToTitleCase $f.Name }} {{ $f.QualifiedKind }} ` + "`" + `bson:"{{ $f.QueryName }},omitempty"` + "`" + `
		{{- end }}
	{{ end -}}
}

// {{ .C.Message.Name }} returns a new {{ .C.Message.QualifiedKind }} populated with scanned values.
func (x *{{ .C.Message.Name }}Scanner) {{ .C.Message.Name }}() *{{ .C.Message.QualifiedKind }} {
	y := &{{ .C.Message.QualifiedKind }}{}

	{{ range $n := .C.Fields.Names -}}
		{{- $f := ($C.Fields.ByName $n) -}}
		{{- if not $f.Ignore -}}
			y.{{ ToTitleCase $f.Name }} = x.{{ ToTitleCase $f.Name }}
		{{- end }}
	{{ end -}}
	return y
}

`

	tmpl, err := template.New("defineMongoStructs").
		Funcs(template.FuncMap{
			"AsPointer":   protocgenlib.AsPointer,
			"ToLower":     strings.ToLower,
			"ToTitleCase": protocgenlib.ToTitleCase,
		}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Bson": c.File.QualifiedPackageName("github.com/rleszilm/genms/mongo/bson"),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

func (c *Collection) defineConfig() error {
	tmplSrc := `// {{ .C.Message.Name }}Config is a struct that can be used to configure a {{ .C.Message.Name }}Collection
	type {{ .C.Message.Name }}Config struct {
		Name string ` + "`" + `envconfig:"name"` + "`" + `
		Database string ` + "`" + `envconfig:"database"` + "`" + `
		Collection string ` + "`" + `envconfig:"collection"` + "`" + `
		Timeout {{ .P.Time }}.Duration ` + "`" + `envconfig:"timeout" default:"5s"` + "`" + `
	}
`

	tmpl, err := template.New("defineMongoConfig").
		Funcs(template.FuncMap{}).
		Parse(tmplSrc)

	if err != nil {
		return err
	}

	p := map[string]string{
		"Time": c.File.QualifiedPackageName("time"),
	}

	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, map[string]interface{}{
		"C": c,
		"P": p,
	}); err != nil {
		return err
	}

	if _, err := c.File.Write(buf.Bytes()); err != nil {
		return err
	}
	return nil
}

// GenerateCollection generates the dal interface for the collection
func GenerateCollection(plugin *protogen.Plugin, file *protogen.File, msg *protogen.Message, opts *annotations.DalOptions) error {
	c := NewCollection(plugin, file, msg, opts)
	return c.render()
}
