// Code generated by counterfeiter. DO NOT EDIT.
package restfakes

import (
	"sync"

	rest_dal_users "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/users/dal/rest"
)

type FakeUserUrlTemplateProvider struct {
	ByIdStub        func() string
	byIdMutex       sync.RWMutex
	byIdArgsForCall []struct {
	}
	byIdReturns struct {
		result1 string
	}
	byIdReturnsOnCall map[int]struct {
		result1 string
	}
	ByKindStub        func() string
	byKindMutex       sync.RWMutex
	byKindArgsForCall []struct {
	}
	byKindReturns struct {
		result1 string
	}
	byKindReturnsOnCall map[int]struct {
		result1 string
	}
	ByNameAndDivisionStub        func() string
	byNameAndDivisionMutex       sync.RWMutex
	byNameAndDivisionArgsForCall []struct {
	}
	byNameAndDivisionReturns struct {
		result1 string
	}
	byNameAndDivisionReturnsOnCall map[int]struct {
		result1 string
	}
	ByPhoneStub        func() string
	byPhoneMutex       sync.RWMutex
	byPhoneArgsForCall []struct {
	}
	byPhoneReturns struct {
		result1 string
	}
	byPhoneReturnsOnCall map[int]struct {
		result1 string
	}
	ByRangeStub        func() string
	byRangeMutex       sync.RWMutex
	byRangeArgsForCall []struct {
	}
	byRangeReturns struct {
		result1 string
	}
	byRangeReturnsOnCall map[int]struct {
		result1 string
	}
	ProviderStubOnlyStub        func() string
	providerStubOnlyMutex       sync.RWMutex
	providerStubOnlyArgsForCall []struct {
	}
	providerStubOnlyReturns struct {
		result1 string
	}
	providerStubOnlyReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserUrlTemplateProvider) ById() string {
	fake.byIdMutex.Lock()
	ret, specificReturn := fake.byIdReturnsOnCall[len(fake.byIdArgsForCall)]
	fake.byIdArgsForCall = append(fake.byIdArgsForCall, struct {
	}{})
	fake.recordInvocation("ById", []interface{}{})
	fake.byIdMutex.Unlock()
	if fake.ByIdStub != nil {
		return fake.ByIdStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.byIdReturns
	return fakeReturns.result1
}

func (fake *FakeUserUrlTemplateProvider) ByIdCallCount() int {
	fake.byIdMutex.RLock()
	defer fake.byIdMutex.RUnlock()
	return len(fake.byIdArgsForCall)
}

func (fake *FakeUserUrlTemplateProvider) ByIdCalls(stub func() string) {
	fake.byIdMutex.Lock()
	defer fake.byIdMutex.Unlock()
	fake.ByIdStub = stub
}

func (fake *FakeUserUrlTemplateProvider) ByIdReturns(result1 string) {
	fake.byIdMutex.Lock()
	defer fake.byIdMutex.Unlock()
	fake.ByIdStub = nil
	fake.byIdReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByIdReturnsOnCall(i int, result1 string) {
	fake.byIdMutex.Lock()
	defer fake.byIdMutex.Unlock()
	fake.ByIdStub = nil
	if fake.byIdReturnsOnCall == nil {
		fake.byIdReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.byIdReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByKind() string {
	fake.byKindMutex.Lock()
	ret, specificReturn := fake.byKindReturnsOnCall[len(fake.byKindArgsForCall)]
	fake.byKindArgsForCall = append(fake.byKindArgsForCall, struct {
	}{})
	fake.recordInvocation("ByKind", []interface{}{})
	fake.byKindMutex.Unlock()
	if fake.ByKindStub != nil {
		return fake.ByKindStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.byKindReturns
	return fakeReturns.result1
}

func (fake *FakeUserUrlTemplateProvider) ByKindCallCount() int {
	fake.byKindMutex.RLock()
	defer fake.byKindMutex.RUnlock()
	return len(fake.byKindArgsForCall)
}

func (fake *FakeUserUrlTemplateProvider) ByKindCalls(stub func() string) {
	fake.byKindMutex.Lock()
	defer fake.byKindMutex.Unlock()
	fake.ByKindStub = stub
}

func (fake *FakeUserUrlTemplateProvider) ByKindReturns(result1 string) {
	fake.byKindMutex.Lock()
	defer fake.byKindMutex.Unlock()
	fake.ByKindStub = nil
	fake.byKindReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByKindReturnsOnCall(i int, result1 string) {
	fake.byKindMutex.Lock()
	defer fake.byKindMutex.Unlock()
	fake.ByKindStub = nil
	if fake.byKindReturnsOnCall == nil {
		fake.byKindReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.byKindReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByNameAndDivision() string {
	fake.byNameAndDivisionMutex.Lock()
	ret, specificReturn := fake.byNameAndDivisionReturnsOnCall[len(fake.byNameAndDivisionArgsForCall)]
	fake.byNameAndDivisionArgsForCall = append(fake.byNameAndDivisionArgsForCall, struct {
	}{})
	fake.recordInvocation("ByNameAndDivision", []interface{}{})
	fake.byNameAndDivisionMutex.Unlock()
	if fake.ByNameAndDivisionStub != nil {
		return fake.ByNameAndDivisionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.byNameAndDivisionReturns
	return fakeReturns.result1
}

func (fake *FakeUserUrlTemplateProvider) ByNameAndDivisionCallCount() int {
	fake.byNameAndDivisionMutex.RLock()
	defer fake.byNameAndDivisionMutex.RUnlock()
	return len(fake.byNameAndDivisionArgsForCall)
}

func (fake *FakeUserUrlTemplateProvider) ByNameAndDivisionCalls(stub func() string) {
	fake.byNameAndDivisionMutex.Lock()
	defer fake.byNameAndDivisionMutex.Unlock()
	fake.ByNameAndDivisionStub = stub
}

func (fake *FakeUserUrlTemplateProvider) ByNameAndDivisionReturns(result1 string) {
	fake.byNameAndDivisionMutex.Lock()
	defer fake.byNameAndDivisionMutex.Unlock()
	fake.ByNameAndDivisionStub = nil
	fake.byNameAndDivisionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByNameAndDivisionReturnsOnCall(i int, result1 string) {
	fake.byNameAndDivisionMutex.Lock()
	defer fake.byNameAndDivisionMutex.Unlock()
	fake.ByNameAndDivisionStub = nil
	if fake.byNameAndDivisionReturnsOnCall == nil {
		fake.byNameAndDivisionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.byNameAndDivisionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByPhone() string {
	fake.byPhoneMutex.Lock()
	ret, specificReturn := fake.byPhoneReturnsOnCall[len(fake.byPhoneArgsForCall)]
	fake.byPhoneArgsForCall = append(fake.byPhoneArgsForCall, struct {
	}{})
	fake.recordInvocation("ByPhone", []interface{}{})
	fake.byPhoneMutex.Unlock()
	if fake.ByPhoneStub != nil {
		return fake.ByPhoneStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.byPhoneReturns
	return fakeReturns.result1
}

func (fake *FakeUserUrlTemplateProvider) ByPhoneCallCount() int {
	fake.byPhoneMutex.RLock()
	defer fake.byPhoneMutex.RUnlock()
	return len(fake.byPhoneArgsForCall)
}

func (fake *FakeUserUrlTemplateProvider) ByPhoneCalls(stub func() string) {
	fake.byPhoneMutex.Lock()
	defer fake.byPhoneMutex.Unlock()
	fake.ByPhoneStub = stub
}

func (fake *FakeUserUrlTemplateProvider) ByPhoneReturns(result1 string) {
	fake.byPhoneMutex.Lock()
	defer fake.byPhoneMutex.Unlock()
	fake.ByPhoneStub = nil
	fake.byPhoneReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByPhoneReturnsOnCall(i int, result1 string) {
	fake.byPhoneMutex.Lock()
	defer fake.byPhoneMutex.Unlock()
	fake.ByPhoneStub = nil
	if fake.byPhoneReturnsOnCall == nil {
		fake.byPhoneReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.byPhoneReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByRange() string {
	fake.byRangeMutex.Lock()
	ret, specificReturn := fake.byRangeReturnsOnCall[len(fake.byRangeArgsForCall)]
	fake.byRangeArgsForCall = append(fake.byRangeArgsForCall, struct {
	}{})
	fake.recordInvocation("ByRange", []interface{}{})
	fake.byRangeMutex.Unlock()
	if fake.ByRangeStub != nil {
		return fake.ByRangeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.byRangeReturns
	return fakeReturns.result1
}

func (fake *FakeUserUrlTemplateProvider) ByRangeCallCount() int {
	fake.byRangeMutex.RLock()
	defer fake.byRangeMutex.RUnlock()
	return len(fake.byRangeArgsForCall)
}

func (fake *FakeUserUrlTemplateProvider) ByRangeCalls(stub func() string) {
	fake.byRangeMutex.Lock()
	defer fake.byRangeMutex.Unlock()
	fake.ByRangeStub = stub
}

func (fake *FakeUserUrlTemplateProvider) ByRangeReturns(result1 string) {
	fake.byRangeMutex.Lock()
	defer fake.byRangeMutex.Unlock()
	fake.ByRangeStub = nil
	fake.byRangeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ByRangeReturnsOnCall(i int, result1 string) {
	fake.byRangeMutex.Lock()
	defer fake.byRangeMutex.Unlock()
	fake.ByRangeStub = nil
	if fake.byRangeReturnsOnCall == nil {
		fake.byRangeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.byRangeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ProviderStubOnly() string {
	fake.providerStubOnlyMutex.Lock()
	ret, specificReturn := fake.providerStubOnlyReturnsOnCall[len(fake.providerStubOnlyArgsForCall)]
	fake.providerStubOnlyArgsForCall = append(fake.providerStubOnlyArgsForCall, struct {
	}{})
	fake.recordInvocation("ProviderStubOnly", []interface{}{})
	fake.providerStubOnlyMutex.Unlock()
	if fake.ProviderStubOnlyStub != nil {
		return fake.ProviderStubOnlyStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.providerStubOnlyReturns
	return fakeReturns.result1
}

func (fake *FakeUserUrlTemplateProvider) ProviderStubOnlyCallCount() int {
	fake.providerStubOnlyMutex.RLock()
	defer fake.providerStubOnlyMutex.RUnlock()
	return len(fake.providerStubOnlyArgsForCall)
}

func (fake *FakeUserUrlTemplateProvider) ProviderStubOnlyCalls(stub func() string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = stub
}

func (fake *FakeUserUrlTemplateProvider) ProviderStubOnlyReturns(result1 string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = nil
	fake.providerStubOnlyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) ProviderStubOnlyReturnsOnCall(i int, result1 string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = nil
	if fake.providerStubOnlyReturnsOnCall == nil {
		fake.providerStubOnlyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.providerStubOnlyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUserUrlTemplateProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.byIdMutex.RLock()
	defer fake.byIdMutex.RUnlock()
	fake.byKindMutex.RLock()
	defer fake.byKindMutex.RUnlock()
	fake.byNameAndDivisionMutex.RLock()
	defer fake.byNameAndDivisionMutex.RUnlock()
	fake.byPhoneMutex.RLock()
	defer fake.byPhoneMutex.RUnlock()
	fake.byRangeMutex.RLock()
	defer fake.byRangeMutex.RUnlock()
	fake.providerStubOnlyMutex.RLock()
	defer fake.providerStubOnlyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserUrlTemplateProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rest_dal_users.UserUrlTemplateProvider = new(FakeUserUrlTemplateProvider)
