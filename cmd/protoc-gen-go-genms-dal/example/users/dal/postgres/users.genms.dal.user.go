// Package postgres_dal_users is generated by protoc-gen-go-genms-dal. *DO NOT EDIT*
package postgres_dal_users

import (
	bytes "bytes"
	context "context"
	sql1 "database/sql"
	fmt "fmt"
	types "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/annotations/types"
	users "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/users"
	dal "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/users/dal"
	dal1 "github.com/rleszilm/genms/dal"
	sql "github.com/rleszilm/genms/sql"
	stats "go.opencensus.io/stats"
	view "go.opencensus.io/stats/view"
	tag "go.opencensus.io/tag"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	log "log"
	strings "strings"
	sync "sync"
	template "text/template"
	time "time"
)

// UserCollection is an autogenerated implementation of dal.UserCollection.
type UserCollection struct {
	dal.UnimplementedUserCollection

	db     sql.DB
	config *UserConfig

	execInsert string
	execUpsert string
	queryAll   string

	execUpdateTmpl *template.Template

	queryById              string
	queryByNameAndDivision string
	queryByKind            string
	queryByPhone           string
	queryProviderStubOnly  string
}

// Initialize initializes and starts the service. Initialize should panic in case of
// any errors. It is intended that Initialize be called only once during the service life-cycle.
func (x *UserCollection) Initialize(_ context.Context) error {
	return nil
}

// Shutdown closes the long-running instance, or service.
func (x *UserCollection) Shutdown(_ context.Context) error {
	return nil
}

// NameOf returns the name of a service. This must be unique if there are multiple instances of the same
// service.
func (x *UserCollection) NameOf() string {
	return "postgres_dal_users_" + x.config.TableName
}

// String returns a string identifier for the service.
func (x *UserCollection) String() string {
	return x.NameOf()
}

// DoInsert provides the base logic for dal.UserCollection.Insert.
// The user should use this as a base for dal.UserCollection.Insert, only having to add
// code that interprets the returned values.
func (x *UserCollection) DoInsert(ctx context.Context, arg *users.User) (sql1.Result, error) {
	var err error
	start := time.Now()
	stats.Record(ctx, userInflight.M(1))
	defer func() {
		stop := time.Now()
		dur := float64(stop.Sub(start).Nanoseconds()) / float64(time.Millisecond)

		if err != nil {
			ctx, err = tag.New(ctx,
				tag.Insert(userQueryError, "user_insert"),
			)
		}

		ctx, err = tag.New(ctx,
			tag.Insert(userQueryName, "user_insert"),
		)

		stats.Record(ctx, userLatency.M(dur), userInflight.M(-1))
	}()

	return x.db.ExecWithReplacements(ctx, x.execInsert, writerFromGeneric(arg))
}

// DoUpsert provides the base logic for dal.UserCollection.Upsert.
// The user should use this as a base for dal.UserCollection.Upsert, only having to add
// code that interprets the returned values.
func (x *UserCollection) DoUpsert(ctx context.Context, arg *users.User) (sql1.Result, error) {
	var err error
	start := time.Now()
	stats.Record(ctx, userInflight.M(1))
	defer func() {
		stop := time.Now()
		dur := float64(stop.Sub(start).Nanoseconds()) / float64(time.Millisecond)

		if err != nil {
			ctx, err = tag.New(ctx,
				tag.Upsert(userQueryError, "user_upsert"),
			)
		}

		ctx, err = tag.New(ctx,
			tag.Upsert(userQueryName, "user_upsert"),
		)

		stats.Record(ctx, userLatency.M(dur), userInflight.M(-1))
	}()

	return x.db.ExecWithReplacements(ctx, x.execUpsert, writerFromGeneric(arg))
}

// DoUpdate provides the base logic for dal.UserCollection.Upsert.
// The user should use this as a base for dal.UserCollection.Upsert, only having to add
// code that interprets the returned values.
func (x *UserCollection) DoUpdate(ctx context.Context, fvs *dal.UserFieldValues, clause string) (sql1.Result, error) {
	var err error
	start := time.Now()
	stats.Record(ctx, userInflight.M(1))
	defer func() {
		stop := time.Now()
		dur := float64(stop.Sub(start).Nanoseconds()) / float64(time.Millisecond)

		if err != nil {
			ctx, err = tag.New(ctx,
				tag.Upsert(userQueryError, "user_update"),
			)
		}

		ctx, err = tag.New(ctx,
			tag.Upsert(userQueryName, "user_update"),
		)

		stats.Record(ctx, userLatency.M(dur), userInflight.M(-1))
	}()

	updates := []string{}

	if fvs.Id != nil {
		updates = append(updates, "id = :id")
	}

	if fvs.Name != nil {
		updates = append(updates, "name = :name")
	}

	if fvs.Division != nil {
		updates = append(updates, "division = :division")
	}

	if fvs.LifetimeScore != nil {
		updates = append(updates, "lifetime_score = :lifetime_score")
	}

	if fvs.LastScore != nil {
		updates = append(updates, "last_score = :last_score")
	}

	if fvs.LastWinnings != nil {
		updates = append(updates, "payout = :payout")
	}

	if fvs.Point != nil {
		updates = append(updates, "point = :point")
	}

	if fvs.Phone != nil {
		updates = append(updates, "phone = :phone")
	}

	if fvs.Geo != nil {
		updates = append(updates, "geo = :geo")
	}

	if fvs.Kind != nil {
		updates = append(updates, "type = :type")
	}

	if fvs.ByBackend != nil {
		updates = append(updates, "by_backend_rest = :by_backend_rest")
	}
	buf := &bytes.Buffer{}
	if err := x.execUpdateTmpl.Execute(buf, map[string]interface{}{
		"clause":  clause,
		"table":   x.config.TableName,
		"updates": strings.Join(updates, ", "),
	}); err != nil {
		return nil, err
	}

	return x.db.ExecWithReplacements(ctx, string(buf.Bytes()), fieldValuesFromGeneric(fvs))
}

// All implements dal.UserCollection.All
func (x *UserCollection) All(ctx context.Context) ([]*users.User, error) {
	fvs := &dal.UserFieldValues{}
	return x.find(ctx, "all", x.queryAll, fvs)
}

// Filter implements dal.UserCollection.Filter
func (x *UserCollection) Filter(ctx context.Context, fvs *dal.UserFieldValues) ([]*users.User, error) {
	query := "SELECT id, name, division, lifetime_score, last_score, lifetime_winnings, payout, point, phone, geo, type, by_backend_rest FROM " + x.config.TableName

	fields := []string{}
	if fvs.Id != nil {
		fields = append(fields, "id = :id")
	}
	if fvs.Name != nil {
		fields = append(fields, "name = :name")
	}
	if fvs.Division != nil {
		fields = append(fields, "division = :division")
	}
	if fvs.LifetimeScore != nil {
		fields = append(fields, "lifetime_score = :lifetime_score")
	}
	if fvs.LastScore != nil {
		fields = append(fields, "last_score = :last_score")
	}

	if fvs.LastWinnings != nil {
		fields = append(fields, "payout = :payout")
	}
	if fvs.Point != nil {
		fields = append(fields, "point = :point")
	}
	if fvs.Phone != nil {
		fields = append(fields, "phone = :phone")
	}
	if fvs.Geo != nil {
		fields = append(fields, "geo = :geo")
	}
	if fvs.Kind != nil {
		fields = append(fields, "type = :type")
	}
	if fvs.ByBackend != nil {
		fields = append(fields, "by_backend_rest = :by_backend_rest")
	}
	if len(fields) > 0 {
		query = fmt.Sprintf("%s WHERE %s", query, strings.Join(fields, " AND "))
	}

	return x.find(ctx, "filter", query, fvs)
}

func (x *UserCollection) find(ctx context.Context, label string, query string, fvs *dal.UserFieldValues) ([]*users.User, error) {
	var err error
	start := time.Now()
	stats.Record(ctx, userInflight.M(1))
	defer func() {
		stop := time.Now()
		dur := float64(stop.Sub(start).Nanoseconds()) / float64(time.Millisecond)

		if err != nil {
			ctx, err = tag.New(ctx,
				tag.Upsert(userQueryError, label),
			)
		}

		ctx, err = tag.New(ctx,
			tag.Upsert(userQueryName, label),
		)

		stats.Record(ctx, userLatency.M(dur), userInflight.M(-1))
	}()

	rows, err := x.db.QueryWithReplacements(ctx, query, fieldValuesFromGeneric(fvs))
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	Users := []*users.User{}
	for rows.Next() {
		obj := &UserScanner{}
		if err = rows.StructScan(obj); err != nil {
			return nil, err
		}
		Users = append(Users, obj.User())
	}
	return Users, nil
}

// ById implements dal.UserCollection.ById
func (x *UserCollection) ById(ctx context.Context, id int64) ([]*users.User, error) {
	fvs := &dal.UserFieldValues{
		Id: &id,
	}
	return x.find(ctx, "by_id", x.queryById, fvs)
}

// ByNameAndDivision implements dal.UserCollection.ByNameAndDivision
func (x *UserCollection) ByNameAndDivision(ctx context.Context, name string, division string) ([]*users.User, error) {
	fvs := &dal.UserFieldValues{
		Name:     &name,
		Division: &division,
	}
	return x.find(ctx, "by_name_and_division", x.queryByNameAndDivision, fvs)
}

// ByKind implements dal.UserCollection.ByKind
func (x *UserCollection) ByKind(ctx context.Context, kind users.User_Kind) ([]*users.User, error) {
	fvs := &dal.UserFieldValues{
		Kind: &kind,
	}
	return x.find(ctx, "by_kind", x.queryByKind, fvs)
}

// ByPhone implements dal.UserCollection.ByPhone
func (x *UserCollection) ByPhone(ctx context.Context, phone *types.Phone) ([]*users.User, error) {
	fvs := &dal.UserFieldValues{
		Phone: phone,
	}
	return x.find(ctx, "by_phone", x.queryByPhone, fvs)
}

// ProviderStubOnly implements dal.UserCollection.ProviderStubOnly
func (x *UserCollection) ProviderStubOnly(ctx context.Context) ([]*users.User, error) {
	fvs := &dal.UserFieldValues{}
	return x.find(ctx, "provider_stub_only", x.queryProviderStubOnly, fvs)
}

// NewUserCollection returns a new UserCollection.
func NewUserCollection(db sql.DB, queries UserQueryTemplateProvider, config *UserConfig) (*UserCollection, error) {
	registerUserMetricsOnce.Do(registerUserMetrics)

	coll := &UserCollection{
		db:     db,
		config: config,
	}

	queryReplacements := map[string]string{
		"table":       config.TableName,
		"fields":      "id, name, division, lifetime_score, last_score, lifetime_winnings, payout, point, phone, geo, type, by_backend_rest",
		"writeFields": ":id, :name, :division, :lifetime_score, :last_score, :lifetime_winnings, :payout, :point, :phone, :geo, :type, :by_backend_rest",
	}

	// generate Insert exec
	execInsert, err := dal1.RenderQuery("dal.User-exec-insert", queries.Insert(), queryReplacements)
	if err != nil {
		return nil, err
	}
	coll.execInsert = execInsert

	// generate Upsert exec
	execUpsert, err := dal1.RenderQuery("dal.User-exec-upsert", queries.Upsert(), queryReplacements)
	if err != nil {
		return nil, err
	}
	coll.execUpsert = execUpsert

	execUpdateTmpl, err := template.New("dal.User-exec-update").
		Funcs(template.FuncMap{}).
		Parse(queries.Update())

	if err != nil {
		return nil, err
	}
	coll.execUpdateTmpl = execUpdateTmpl

	// generate All query
	queryAll, err := dal1.RenderQuery("dal.User-query-all", queries.All(), queryReplacements)
	if err != nil {
		return nil, err
	}
	coll.queryAll = queryAll

	// generate ById query
	queryById, err := dal1.RenderQuery("dal.User-query-by_id", queries.ById(), queryReplacements)
	if err != nil {
		return nil, err
	}
	coll.queryById = queryById

	// generate ByNameAndDivision query
	queryByNameAndDivision, err := dal1.RenderQuery("dal.User-query-by_name_and_division", queries.ByNameAndDivision(), queryReplacements)
	if err != nil {
		return nil, err
	}
	coll.queryByNameAndDivision = queryByNameAndDivision

	// generate ByKind query
	queryByKind, err := dal1.RenderQuery("dal.User-query-by_kind", queries.ByKind(), queryReplacements)
	if err != nil {
		return nil, err
	}
	coll.queryByKind = queryByKind

	// generate ByPhone query
	queryByPhone, err := dal1.RenderQuery("dal.User-query-by_phone", queries.ByPhone(), queryReplacements)
	if err != nil {
		return nil, err
	}
	coll.queryByPhone = queryByPhone

	// generate ProviderStubOnly query
	queryProviderStubOnly, err := dal1.RenderQuery("dal.User-query-provider_stub_only", queries.ProviderStubOnly(), queryReplacements)
	if err != nil {
		return nil, err
	}
	coll.queryProviderStubOnly = queryProviderStubOnly

	return coll, nil
}

// UserFieldValues is an autogenerated struct that is used in generic User queries.
type UserFieldValues struct {
	Id            *int64   `db:"id"`
	Name          *string  `db:"name"`
	Division      *string  `db:"division"`
	LifetimeScore *float64 `db:"lifetime_score"`
	LastScore     *float32 `db:"last_score"`

	LastWinnings *int32           `db:"payout"`
	Point        *types.Point     `db:"point"`
	Phone        *types.Phone     `db:"phone"`
	Geo          *latlng.LatLng   `db:"geo"`
	Kind         *users.User_Kind `db:"type"`
	ByBackend    *string          `db:"by_backend_rest"`
}

func fieldValuesFromGeneric(y *dal.UserFieldValues) *UserFieldValues {
	f := &UserFieldValues{}
	if y.Id != nil {
		f.Id = y.Id
	}
	if y.Name != nil {
		f.Name = y.Name
	}
	if y.Division != nil {
		f.Division = y.Division
	}
	if y.LifetimeScore != nil {
		f.LifetimeScore = y.LifetimeScore
	}
	if y.LastScore != nil {
		f.LastScore = y.LastScore
	}

	if y.LastWinnings != nil {
		f.LastWinnings = y.LastWinnings
	}
	if y.Point != nil {
		f.Point = y.Point
	}
	if y.Phone != nil {
		f.Phone = y.Phone
	}
	if y.Geo != nil {
		f.Geo = y.Geo
	}
	if y.Kind != nil {
		f.Kind = y.Kind
	}
	if y.ByBackend != nil {
		f.ByBackend = y.ByBackend
	}
	return f
}

// UserScanner is an autogenerated struct that
// is used to parse query results.
type UserScanner struct {
	Id            sql1.NullInt64   `db:"id"`
	Name          sql1.NullString  `db:"name"`
	Division      sql1.NullString  `db:"division"`
	LifetimeScore sql1.NullFloat64 `db:"lifetime_score"`
	LastScore     sql1.NullFloat64 `db:"last_score"`

	LastWinnings sql1.NullInt32  `db:"payout"`
	Point        *types.Point    `db:"point"`
	Phone        *types.Phone    `db:"phone"`
	Geo          *latlng.LatLng  `db:"geo"`
	Kind         sql1.NullInt32  `db:"type"`
	ByBackend    sql1.NullString `db:"by_backend_rest"`
}

// User returns a new users.User populated with scanned values.
func (x *UserScanner) User() *users.User {
	y := &users.User{}

	if x.Id.Valid {
		y.Id = x.Id.Int64
	}
	if x.Name.Valid {
		y.Name = x.Name.String
	}
	if x.Division.Valid {
		y.Division = x.Division.String
	}
	if x.LifetimeScore.Valid {
		y.LifetimeScore = x.LifetimeScore.Float64
	}
	if x.LastScore.Valid {
		y.LastScore = float32(x.LastScore.Float64)
	}

	if x.LastWinnings.Valid {
		y.LastWinnings = x.LastWinnings.Int32
	}
	y.Point = x.Point
	y.Phone = x.Phone
	y.Geo = x.Geo
	if x.Kind.Valid {
		y.Kind = users.User_Kind(x.Kind.Int32)
	}
	if x.ByBackend.Valid {
		y.ByBackend = x.ByBackend.String
	}
	return y
}

// UserWriter is an autogenerated struct that is used to supply values to write queries.
type UserWriter struct {
	Id            int64   `db:"id"`
	Name          string  `db:"name"`
	Division      string  `db:"division"`
	LifetimeScore float64 `db:"lifetime_score"`
	LastScore     float32 `db:"last_score"`

	LastWinnings int32           `db:"payout"`
	Point        *types.Point    `db:"point"`
	Phone        *types.Phone    `db:"phone"`
	Geo          *latlng.LatLng  `db:"geo"`
	Kind         users.User_Kind `db:"type"`
	ByBackend    string          `db:"by_backend_rest"`
}

func writerFromGeneric(y *users.User) *UserWriter {
	x := &UserWriter{}
	x.Id = y.Id
	x.Name = y.Name
	x.Division = y.Division
	x.LifetimeScore = y.LifetimeScore
	x.LastScore = y.LastScore

	x.LastWinnings = y.LastWinnings
	x.Point = y.Point
	x.Phone = y.Phone
	x.Geo = y.Geo
	x.Kind = y.Kind
	x.ByBackend = y.ByBackend
	return x
}

// UserConfig is a struct that can be used to configure a UserCollection
type UserConfig struct {
	TableName string `envconfig:"table"`
}

// UserQueryTemplateProvider is an interface that returns the query templated that should be executed
// to generate the queries that the collection will use.
//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 . UserQueryTemplateProvider
type UserQueryTemplateProvider interface {
	Insert() string
	Upsert() string
	Update() string
	All() string
	ById() string
	ByNameAndDivision() string
	ByKind() string
	ByPhone() string
	ProviderStubOnly() string
}

// UserQueries provides auto-generated queries when possible. This is not gauranteed to be a complete
// implementation of the interface. This should be used as a base for the actual query provider used.
type UserQueries struct {
}

// Insert implements UserQueryTemplateProvider.Insert.
func (x *UserQueries) Insert() string {
	return `INSERT INTO {{ .table }}({{ .fields }}) VALUES({{ .writeFields }});`
}

// Upsert implements UserQueryTemplateProvider.Upsert.
func (x *UserQueries) Upsert() string {
	return `INSERT INTO {{ .table }}({{ .fields }}) VALUES({{ .writeFields }});`
}

// Update implements UserQueryTemplateProvider.Update.
func (x *UserQueries) Update() string {
	return `UPDATE {{ .table }} SET {{ .updates }}{{ if .clause }} WHERE {{ .clause }}{{ end }};`
}

// All implements UserQueryTemplateProvider.All.
func (x *UserQueries) All() string {
	return `SELECT {{ .fields }} FROM {{ .table }};`
}

//ByIdimplements UserQueryTemplateProvider.ById.
func (x *UserQueries) ById() string {
	return `SELECT {{ .fields }} FROM {{ .table }} WHERE
			1 = 1 AND
				id = :id;`
}

//ByNameAndDivisionimplements UserQueryTemplateProvider.ByNameAndDivision.
func (x *UserQueries) ByNameAndDivision() string {
	return `SELECT {{ .fields }} FROM {{ .table }} WHERE
			1 = 1 AND
				name = :name AND
				division = :division;`
}

//ByKindimplements UserQueryTemplateProvider.ByKind.
func (x *UserQueries) ByKind() string {
	return `SELECT {{ .fields }} FROM {{ .table }} WHERE
			1 = 1 AND
				type = :type;`
}

//ByPhoneimplements UserQueryTemplateProvider.ByPhone.
func (x *UserQueries) ByPhone() string {
	return `SELECT {{ .fields }} FROM {{ .table }} WHERE
			1 = 1 AND
				phone = :phone;`
}

// define metrics
var (
	userQueryName  = tag.MustNewKey("dal_postgres_user")
	userQueryError = tag.MustNewKey("dal_postgres_user_error")

	userLatency  = stats.Float64("user_latency", "Latency of User queries", stats.UnitMilliseconds)
	userInflight = stats.Int64("user_inflight", "Count of User queries in flight", stats.UnitDimensionless)

	registerUserMetricsOnce sync.Once
)

func registerUserMetrics() {
	views := []*view.View{
		{
			Name:        "dal_postgres_user_latency",
			Measure:     userLatency,
			Description: "The distribution of the query latencies",
			TagKeys:     []tag.Key{userQueryName, userQueryError},
			Aggregation: view.Distribution(0, 25, 100, 200, 400, 800, 10000),
		},
		{
			Name:        "dal_postgres_user_inflight",
			Measure:     userInflight,
			Description: "The number of queries being processed",
			TagKeys:     []tag.Key{userQueryName},
			Aggregation: view.Sum(),
		},
	}

	if err := view.Register(views...); err != nil {
		log.Fatal("Cannot register metrics:", err)
	}
}
