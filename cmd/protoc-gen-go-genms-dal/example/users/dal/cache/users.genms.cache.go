// Package cache_dal_users is generated by protoc-gen-go-genms-dal. *DO NOT EDIT*
package cache_dal_users

import (
	context "context"
	log1 "log"
	sync "sync"

	users "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/users"
	keyvalue "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/users/dal/keyvalue"
	log "github.com/rleszilm/genms/log"
	stats "go.opencensus.io/stats"
	view "go.opencensus.io/stats/view"
	tag "go.opencensus.io/tag"
)

var (
	logs = log.NewChannel("cache")
)

// NilUserCache is a KV ReadWriter that takes no action on read or write.
type NilUserCache struct {
}

// GetByKey implements keyvalue.UserReadWriter.
func (x *NilUserCache) GetByKey(_ context.Context, _ keyvalue.UserKey) (*users.User, error) {
	return nil, nil
}

// SetByKey implements keyvalue.UserReadWriter.
func (x *NilUserCache) SetByKey(_ context.Context, _ keyvalue.UserKey, _ *users.User) error {
	return nil
}

// define metrics
var (
	tagCacheCollection = tag.MustNewKey("cache_collection")
	tagCacheInstance   = tag.MustNewKey("cache_instance")
	tagCacheMethod     = tag.MustNewKey("cache_method")
	tagCacheType       = tag.MustNewKey("cache_type")

	measureError           = stats.Int64("user_error", "Count of User cache errors", stats.UnitDimensionless)
	measureHit             = stats.Int64("user_hit", "Count of User cache hits", stats.UnitDimensionless)
	measureMiss            = stats.Int64("user_miss", "Count of User cache misses", stats.UnitDimensionless)
	measureLatency         = stats.Float64("user_latency", "Latency of User cache lookups", stats.UnitMilliseconds)
	measureInflight        = stats.Int64("user_inflight", "Count of User cache lookups", stats.UnitDimensionless)
	measureUpdatesLatency  = stats.Float64("user_latency", "Latency of User cache updates.", stats.UnitMilliseconds)
	measureUpdatesInflight = stats.Int64("user_inflight", "Count of User cache updates in flight", stats.UnitDimensionless)

	registerMetricsOnce sync.Once
)

func registerMetrics() {
	views := []*view.View{
		{
			Name:        "cache_error",
			Measure:     measureHit,
			Description: "Count of cache lookups where a value was present.",
			TagKeys:     []tag.Key{tagCacheCollection, tagCacheInstance, tagCacheType, tagCacheMethod},
			Aggregation: view.Sum(),
		},
		{
			Name:        "cache_hit",
			Measure:     measureHit,
			Description: "Count of cache lookups where a value was present.",
			TagKeys:     []tag.Key{tagCacheCollection, tagCacheInstance, tagCacheType, tagCacheMethod},
			Aggregation: view.Sum(),
		},
		{
			Name:        "cache_miss",
			Measure:     measureMiss,
			Description: "Count of cache lookups where a value was not present.",
			TagKeys:     []tag.Key{tagCacheCollection, tagCacheInstance, tagCacheType, tagCacheMethod},
			Aggregation: view.Sum(),
		},
		{
			Name:        "cache_latency",
			Measure:     measureLatency,
			Description: "The distribution of cache lookup latencies.",
			TagKeys:     []tag.Key{tagCacheCollection, tagCacheInstance, tagCacheType, tagCacheMethod},
			Aggregation: view.Distribution(0, 25, 100, 200, 400, 800, 10000),
		},
		{
			Name:        "cache_inflight",
			Measure:     measureInflight,
			Description: "The number of cache lookups being processed",
			TagKeys:     []tag.Key{tagCacheCollection, tagCacheInstance, tagCacheType, tagCacheMethod},
			Aggregation: view.Sum(),
		},
		{
			Name:        "cache_update_latency",
			Measure:     measureUpdatesLatency,
			Description: "The distribution of cache update latencies.",
			TagKeys:     []tag.Key{tagCacheCollection, tagCacheInstance, tagCacheType, tagCacheMethod},
			Aggregation: view.Distribution(0, 25, 100, 200, 400, 800, 10000),
		},
		{
			Name:        "cache_update_inflight",
			Measure:     measureUpdatesInflight,
			Description: "The number of cache updates being processed",
			TagKeys:     []tag.Key{tagCacheCollection, tagCacheInstance, tagCacheType, tagCacheMethod},
			Aggregation: view.Sum(),
		},
	}

	if err := view.Register(views...); err != nil {
		log1.Fatal("Cannot register metrics:", err)
	}
}

func init() {
	registerMetricsOnce.Do(registerMetrics)
}
