syntax = "proto3";

package greeter;
option go_package = "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/users";

import "google/type/latlng.proto";
import "protoc-gen-go-genms-dal/annotations/annotations.proto";
import "protoc-gen-go-genms-dal/annotations/types/types.proto";

message User {
    int64 id = 1;
    string name = 2;
    string division = 3;
    double lifetime_score = 4;
    float last_score = 5;
    int64 lifetime_winnings = 6 [
        (genms.dal.field_options) = {
            ignore: true
        }
    ];
    int32 last_winnings = 7 [
        (genms.dal.field_options) = {
            field: "payout"
        }
    ];

    genms.dal.types.Point point = 8;
    genms.dal.types.Phone phone = 9;
    google.type.LatLng geo = 10;

    enum Kind {
        Kind_User = 0;
        Kind_Admin = 1;
    }
    Kind kind = 11 [(genms.dal.field_options) = {field: "type"}];

    string by_backend = 12 [
        (genms.dal.field_options) = {
            postgres: {
                field: "by_backend_postgres"
            }
            rest: {
                field: "by_backend_rest"
            }
        }
    ];

    option (genms.dal.message_options) = {
        queries: [
            {
                name: "by id"
                args: [{name: "id"}]
            },
            {
                name: "by name and division"
                args: [
                    {name: "name"},
                    {name: "division"}
                ]
            },
            {
                name: "by kind"
                args: [{name: "kind"}]
            },
            {
                name: "by phone"
                args: [{
                    name: "phone"
                    rest: {
                        name: "mobile"
                        location: Body
                    }
                }]
                rest: {
                    method: POST
                }
            },
            {
                name: "by range"
                args: [
                    {
                        name: "start"
                        kind: "int64"
                        comparison: GT
                    }
                ]
            },
            {
                name: "provider stub only"
                mode: ProviderStub
            },
            {
                name: "interface stub only"
                mode: InterfaceStub
            }
        ]
        backends: [Postgres, Rest]
    };
}
