syntax = "proto3";

package greeter;
option go_package = "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/users";

import "google/type/latlng.proto";
import "protoc-gen-go-genms-dal/annotations/annotations.proto";
import "protoc-gen-go-genms-dal/annotations/types/types.proto";

message User {
    int32 scalar_int32 = 1;
    int64 scalar_int64 = 2;
    float scalar_float32 = 3;
    double scalar_float64 = 4;
    string scalar_string = 5;
    bool scalar_bool = 6;
    
    enum Enum {
        Kind_User = 0;
        Kind_Admin = 1;
    }
    Enum scalar_enum = 7;

    message Message {
        int32 id = 1;
    }
    Message obj_message = 8;
    
    string ignored = 9 [(genms.dal.field_options).ignore = true];
    string renamed = 10 [(genms.dal.field_options).field = "aliased"];

    string ignored_postgres = 11 [(genms.dal.field_options).postgres.ignore = true];
    string renamed_postgres = 12 [(genms.dal.field_options).postgres.field = "aliased_postgres"];
    
    string ignored_rest = 13 [(genms.dal.field_options).rest.ignore = true];
    string renamed_rest = 14 [(genms.dal.field_options).rest.field = "aliased_rest"];

    option (genms.dal.message_options) = {
        queries: [
            {
                name: "one param"
                args: [{name: "scalar_int32"}]
            },
            {
                name: "multiple param"
                args: [
                    {name: "scalar_int32"},
                    {name: "scalar_int64"},
                    {name: "scalar_float32"}
                ]
            },
            {
                name: "message param"
                args: [{name: "obj_message"}]
            },
            {
                name: "with comparator"
                args: [{name: "scalar_int32", comparison: GT}]
            },
            {
                name: "with rest"
                args: [
                    {
                        name: "scalar_int32",
                        rest: {
                            name: "query_rest_scalar_int32"
                            location: Query
                        }
                    },
                    {
                        name: "scalar_int64",
                        rest: {location: Path}
                    },
                    {
                        name: "scalar_float32",
                        rest: {location: Body}
                    },
                    {
                        name: "scalar_float64",
                        rest: {location: Header}
                    }
                ]
                rest: {
                    method: POST
                }
            },
            {
                name: "provider stub only"
                mode: ProviderStub
            },
            {
                name: "interface stub only"
                mode: InterfaceStub
            }
        ]
        backends: [Postgres, Rest]
    };
}
