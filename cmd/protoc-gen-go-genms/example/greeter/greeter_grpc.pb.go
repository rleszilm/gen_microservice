// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WithRestClient is the client API for WithRest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithRestClient interface {
	HelloRest(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type withRestClient struct {
	cc grpc.ClientConnInterface
}

func NewWithRestClient(cc grpc.ClientConnInterface) WithRestClient {
	return &withRestClient{cc}
}

func (c *withRestClient) HelloRest(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/greeter.WithRest/HelloRest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithRestServer is the server API for WithRest service.
// All implementations must embed UnimplementedWithRestServer
// for forward compatibility
type WithRestServer interface {
	HelloRest(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedWithRestServer()
}

// UnimplementedWithRestServer must be embedded to have forward compatible implementations.
type UnimplementedWithRestServer struct {
}

func (*UnimplementedWithRestServer) HelloRest(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloRest not implemented")
}
func (*UnimplementedWithRestServer) mustEmbedUnimplementedWithRestServer() {}

func RegisterWithRestServer(s *grpc.Server, srv WithRestServer) {
	s.RegisterService(&_WithRest_serviceDesc, srv)
}

func _WithRest_HelloRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithRestServer).HelloRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greeter.WithRest/HelloRest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithRestServer).HelloRest(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _WithRest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.WithRest",
	HandlerType: (*WithRestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloRest",
			Handler:    _WithRest_HelloRest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeter.proto",
}

// WithGraphQLClient is the client API for WithGraphQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithGraphQLClient interface {
	HelloGraphQL(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type withGraphQLClient struct {
	cc grpc.ClientConnInterface
}

func NewWithGraphQLClient(cc grpc.ClientConnInterface) WithGraphQLClient {
	return &withGraphQLClient{cc}
}

func (c *withGraphQLClient) HelloGraphQL(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/greeter.WithGraphQL/HelloGraphQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithGraphQLServer is the server API for WithGraphQL service.
// All implementations must embed UnimplementedWithGraphQLServer
// for forward compatibility
type WithGraphQLServer interface {
	HelloGraphQL(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedWithGraphQLServer()
}

// UnimplementedWithGraphQLServer must be embedded to have forward compatible implementations.
type UnimplementedWithGraphQLServer struct {
}

func (*UnimplementedWithGraphQLServer) HelloGraphQL(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloGraphQL not implemented")
}
func (*UnimplementedWithGraphQLServer) mustEmbedUnimplementedWithGraphQLServer() {}

func RegisterWithGraphQLServer(s *grpc.Server, srv WithGraphQLServer) {
	s.RegisterService(&_WithGraphQL_serviceDesc, srv)
}

func _WithGraphQL_HelloGraphQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithGraphQLServer).HelloGraphQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greeter.WithGraphQL/HelloGraphQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithGraphQLServer).HelloGraphQL(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _WithGraphQL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.WithGraphQL",
	HandlerType: (*WithGraphQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloGraphQL",
			Handler:    _WithGraphQL_HelloGraphQL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeter.proto",
}

// WithRestAndGraphQLClient is the client API for WithRestAndGraphQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithRestAndGraphQLClient interface {
	HelloRestAndGraphQL(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type withRestAndGraphQLClient struct {
	cc grpc.ClientConnInterface
}

func NewWithRestAndGraphQLClient(cc grpc.ClientConnInterface) WithRestAndGraphQLClient {
	return &withRestAndGraphQLClient{cc}
}

func (c *withRestAndGraphQLClient) HelloRestAndGraphQL(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/greeter.WithRestAndGraphQL/HelloRestAndGraphQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithRestAndGraphQLServer is the server API for WithRestAndGraphQL service.
// All implementations must embed UnimplementedWithRestAndGraphQLServer
// for forward compatibility
type WithRestAndGraphQLServer interface {
	HelloRestAndGraphQL(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedWithRestAndGraphQLServer()
}

// UnimplementedWithRestAndGraphQLServer must be embedded to have forward compatible implementations.
type UnimplementedWithRestAndGraphQLServer struct {
}

func (*UnimplementedWithRestAndGraphQLServer) HelloRestAndGraphQL(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloRestAndGraphQL not implemented")
}
func (*UnimplementedWithRestAndGraphQLServer) mustEmbedUnimplementedWithRestAndGraphQLServer() {}

func RegisterWithRestAndGraphQLServer(s *grpc.Server, srv WithRestAndGraphQLServer) {
	s.RegisterService(&_WithRestAndGraphQL_serviceDesc, srv)
}

func _WithRestAndGraphQL_HelloRestAndGraphQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithRestAndGraphQLServer).HelloRestAndGraphQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greeter.WithRestAndGraphQL/HelloRestAndGraphQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithRestAndGraphQLServer).HelloRestAndGraphQL(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _WithRestAndGraphQL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.WithRestAndGraphQL",
	HandlerType: (*WithRestAndGraphQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloRestAndGraphQL",
			Handler:    _WithRestAndGraphQL_HelloRestAndGraphQL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greeter.proto",
}
