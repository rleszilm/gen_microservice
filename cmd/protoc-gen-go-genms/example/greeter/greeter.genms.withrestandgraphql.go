// Package greeter is generated by protoc-gen-go-genms. *DO NOT EDIT*
package greeter

import (
	context "context"
	service "github.com/rleszilm/genms/service"
	graphql "github.com/rleszilm/genms/service/graphql"
	grpc "github.com/rleszilm/genms/service/grpc"
	rest "github.com/rleszilm/genms/service/rest"
	grpc1 "google.golang.org/grpc"
)

// WithRestAndGraphQLServerService implements WithRestAndGraphQLService
type WithRestAndGraphQLServerService struct {
	service.Deps

	impl          WithRestAndGraphQLServer
	grpcServer    *grpc.Server
	restServer    *rest.Server
	graphqlServer *graphql.Server
}

// Initialize implements service.Service.Initialize
func (s *WithRestAndGraphQLServerService) Initialize(ctx context.Context) error {
	s.grpcServer.WithService(func(server *grpc1.Server) {
		RegisterWithRestAndGraphQLServer(server, s.impl)
	})

	if err := s.restServer.WithGrpcProxyHandler(ctx, "WithRestAndGraphQL", RegisterWithRestAndGraphQLHandlerFromEndpoint); err != nil {
		return err
	}

	if err := s.graphqlServer.WithGrpcProxy(ctx, "WithRestAndGraphQL", RegisterWithRestAndGraphQLGraphqlWithOptions); err != nil {
		return err
	}
	return nil
}

// Shutdown implements service.Service.Shutdown
func (s *WithRestAndGraphQLServerService) Shutdown(_ context.Context) error {
	return nil
}

// NameOf returns the name of the service
func (s *WithRestAndGraphQLServerService) NameOf() string {
	return "with-rest-and-graph-ql"
}

// String returns the string name of the service
func (s *WithRestAndGraphQLServerService) String() string {
	return s.NameOf()
}

// NewWithRestAndGraphQLServerService returns a new WithRestAndGraphQLServerService
func NewWithRestAndGraphQLServerService(impl WithRestAndGraphQLServer, grpcServer *grpc.Server, restServer *rest.Server, graphqlServer *graphql.Server) *WithRestAndGraphQLServerService {
	server := &WithRestAndGraphQLServerService{
		impl:          impl,
		grpcServer:    grpcServer,
		restServer:    restServer,
		graphqlServer: graphqlServer,
	}

	if asService, ok := impl.(service.Service); ok {
		server.WithDependencies(asService)
	}

	grpcServer.WithDependencies(server)
	restServer.WithDependencies(server)
	graphqlServer.WithDependencies(server)
	return server
}
