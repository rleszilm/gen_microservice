// Package greeter is generated by protoc-gen-go-genms. *DO NOT EDIT*
package greeter

import (
	context "context"
	service "github.com/rleszilm/gen_microservice/service"
	graphql "github.com/rleszilm/gen_microservice/service/graphql"
	grpc "github.com/rleszilm/gen_microservice/service/grpc"
	grpc1 "google.golang.org/grpc"
)

// WithGraphQLServerService implements WithGraphQLService
type WithGraphQLServerService struct {
	service.Deps
	WithGraphQLServer

	grpcServer *grpc.Server

	graphqlServer *graphql.Server
}

// Initialize implements service.Service.Initialize
func (s *WithGraphQLServerService) Initialize(ctx context.Context) error {
	s.grpcServer.WithService(func(server *grpc1.Server) {
		RegisterWithGraphQLServer(server, s)
	})

	if err := s.graphqlServer.WithGrpcProxy(ctx, "WithGraphQL", RegisterWithGraphQLGraphqlWithOptions); err != nil {
		return err
	}
	return nil
}

// Shutdown implements service.Service.Shutdown
func (s *WithGraphQLServerService) Shutdown(_ context.Context) error {
	return nil
}

// NameOf returns the name of the service
func (s *WithGraphQLServerService) NameOf() string {
	return "with_graph_ql"
}

// String returns the string name of the service
func (s *WithGraphQLServerService) String() string {
	return s.NameOf()
}

// NewWithGraphQLServerService returns a new WithGraphQLServerService
func NewWithGraphQLServerService(impl WithGraphQLServer, grpcServer *grpc.Server, graphqlServer *graphql.Server) *WithGraphQLServerService {
	server := &WithGraphQLServerService{
		WithGraphQLServer: impl,
		grpcServer:        grpcServer,

		graphqlServer: graphqlServer,
	}

	grpcServer.WithDependencies(server)

	graphqlServer.WithDependencies(server)
	return server
}
