package generator

import (
	"bytes"
	"text/template"

	plugin_go "github.com/golang/protobuf/protoc-gen-go/plugin"
)

const (
	outlineTemplateSource = `// Code generated by protoc-gen-go-genms. DO NOT EDIT.
package {{ .packageName }}

import (
	// @@protoc_insertion_point(genms-imports)
)

var (
	// @@protoc_insertion_point(genms-variables)
)

const (
	// @@protoc_insertion_point(genms-constants)
)

// @@protoc_insertion_point(genms-logic)
`
)

var (
	outlineTemplate = template.Must(
		template.New("outline").
			Funcs(template.FuncMap{}).
			Parse(outlineTemplateSource))
)

func generateOutline(g generator, defaultVals map[string]interface{}) (*plugin_go.CodeGeneratorResponse_File, error) {
	vals := map[string]interface{}{}
	for k, v := range defaultVals {
		vals[k] = v
	}

	buf := &bytes.Buffer{}
	if err := outlineTemplate.Execute(buf, vals); err != nil {
		return nil, err
	}

	return &plugin_go.CodeGeneratorResponse_File{
		Name:    strRef(g.FileName()),
		Content: strRef(buf.String()),
	}, nil
}

type outline struct {
	fr *fileRunner
}

func (o *outline) FileRunner() *fileRunner {
	return o.fr
}

func (o *outline) FileName() string {
	return filename(o.fr.file, o.fr.opts)
}

func (o *outline) Replacements(defaults map[string]interface{}) map[string]interface{} {
	vals := cloneValues(defaults)
	vals["packageName"] = o.fr.file.GetPackage()
	return vals
}

func (o *outline) Imports() []string {
	return nil
}

func (o *outline) Constants() map[string]interface{} {
	return nil
}

func (o *outline) Variables() map[string]string {
	return nil
}

func (o *outline) Logic() *template.Template {
	return nil
}

func (o *outline) Outline() *template.Template {
	return outlineTemplate
}

func newOutline(fr *fileRunner) *outline {
	return &outline{
		fr: fr,
	}
}
