// Code generated by proroc-gen-graphql, DO NOT EDIT.
package greeter

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/rleszilm/grpc-graphql-gateway/options"
	"github.com/rleszilm/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_Message *graphql.Object // message Message in greeter.proto
)

func Gql__type_Message() *graphql.Object {
	if gql__type_Message == nil {
		gql__type_Message = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_Message",
			Fields: graphql.Fields{
				"value": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_Message
}

// graphql__resolver_WithRestAndGraphQL is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_WithRestAndGraphQL struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_WithRestAndGraphQL creates pointer of service struct
func new_graphql_resolver_WithRestAndGraphQL(opts *options.ServerOptions) *graphql__resolver_WithRestAndGraphQL {
	var conn *grpc.ClientConn
	host := "localhost:50051"
	dialOptions := []grpc.DialOption{}

	if opts != nil {
		conn = opts.Conn

		if opts.Host != "" {
			host = opts.Host
		}

		if opts.WithInsecure || false {
			dialOptions = append(dialOptions, grpc.WithInsecure())
		}
	}

	res := &graphql__resolver_WithRestAndGraphQL{
		conn:        conn,
		host:        host,
		dialOptions: dialOptions,
	}

	return res
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_WithRestAndGraphQL) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_WithRestAndGraphQL) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"restAndGraphQL": &graphql.Field{
			Type: Gql__type_Message(),
			Args: graphql.FieldConfigArgument{
				"value": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req Message
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for restAndGraphQL")
				}
				client := NewWithRestAndGraphQLClient(conn)
				resp, err := client.HelloRestAndGraphQL(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC HelloRestAndGraphQL")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_WithRestAndGraphQL) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// WithGRPCAddr sets the address of the grpc server to use.
func (x *graphql__resolver_WithRestAndGraphQL) WithGRPCAddr(addr string) {
	x.host = addr
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterWithRestAndGraphQLGraphqlHandler with *grpc.ClientConn manually.
func RegisterWithRestAndGraphQLGraphql(mux *runtime.ServeMux) error {
	return RegisterWithRestAndGraphQLGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service WithRestAndGraphQL {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterWithRestAndGraphQLGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	opts := &options.ServerOptions{Conn: conn}
	return mux.AddHandler(new_graphql_resolver_WithRestAndGraphQL(opts))
}

// RegisterWithRestAndGraphQLGraphqlWithOptions registers the service with the given options.
func RegisterWithRestAndGraphQLGraphqlWithOptions(mux *runtime.ServeMux, opts *options.ServerOptions) error {
	return mux.AddHandler(new_graphql_resolver_WithRestAndGraphQL(opts))
}

// graphql__resolver_WithGraphQL is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_WithGraphQL struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_WithGraphQL creates pointer of service struct
func new_graphql_resolver_WithGraphQL(opts *options.ServerOptions) *graphql__resolver_WithGraphQL {
	var conn *grpc.ClientConn
	host := "localhost:50051"
	dialOptions := []grpc.DialOption{}

	if opts != nil {
		conn = opts.Conn

		if opts.Host != "" {
			host = opts.Host
		}

		if opts.WithInsecure || false {
			dialOptions = append(dialOptions, grpc.WithInsecure())
		}
	}

	res := &graphql__resolver_WithGraphQL{
		conn:        conn,
		host:        host,
		dialOptions: dialOptions,
	}

	return res
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_WithGraphQL) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_WithGraphQL) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"graphql": &graphql.Field{
			Type: Gql__type_Message(),
			Args: graphql.FieldConfigArgument{
				"value": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req Message
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for graphql")
				}
				client := NewWithGraphQLClient(conn)
				resp, err := client.HelloGraphQL(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC HelloGraphQL")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_WithGraphQL) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// WithGRPCAddr sets the address of the grpc server to use.
func (x *graphql__resolver_WithGraphQL) WithGRPCAddr(addr string) {
	x.host = addr
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterWithGraphQLGraphqlHandler with *grpc.ClientConn manually.
func RegisterWithGraphQLGraphql(mux *runtime.ServeMux) error {
	return RegisterWithGraphQLGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service WithGraphQL {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterWithGraphQLGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	opts := &options.ServerOptions{Conn: conn}
	return mux.AddHandler(new_graphql_resolver_WithGraphQL(opts))
}

// RegisterWithGraphQLGraphqlWithOptions registers the service with the given options.
func RegisterWithGraphQLGraphqlWithOptions(mux *runtime.ServeMux, opts *options.ServerOptions) error {
	return mux.AddHandler(new_graphql_resolver_WithGraphQL(opts))
}
